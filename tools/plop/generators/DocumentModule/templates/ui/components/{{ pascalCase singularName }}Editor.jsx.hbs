/* eslint-disable max-len, no-return-assign */

import React, { useState } from 'react';
import PropTypes from 'prop-types';

import AutoForm from '/imports/ui/components/AutoForm';
import { AutoField, LongTextField } from 'uniforms-antd';
import i18n from 'meteor/universe:i18n';
import { useMutation } from '@apollo/client';
import message from 'antd/lib/message';
import Modal from 'antd/lib/modal';
import Icon from 'antd/lib/icon';
import Menu from 'antd/lib/menu';
import SettingIcon from '@ant-design/icons/SettingOutlined';
import FileIcon from '@ant-design/icons/FileOutlined';
import LockIcon from '@ant-design/icons/LockOutlined';
import UnlockIcon from '@ant-design/icons/UnlockOutlined';
import LockFilledIcon from '@ant-design/icons/LockFilled';
import UnlockFilledIcon from '@ant-design/icons/UnlockFilled';
import Dropdown from '/imports/ui/components/Dropdown';

import { edit{{ pascalCase singularName }} as edit{{ pascalCase singularName }}Query, {{ camelCase singularName }} } from '../queries/{{ pascalCase pluralName }}.gql';
import {
  //  update{{ pascalCase singularName }} as update{{ pascalCase singularName }}Mutation,
  remove{{ pascalCase singularName }} as remove{{ pascalCase singularName }}Mutation,
  update{{ pascalCase singularName }}Key as update{{ pascalCase singularName }}KeyMutation,
} from '../mutations/{{ pascalCase pluralName }}.gql';
import delay from '../../../libs/delay';
import { timeago } from '../../../libs/dates';
import {{ pascalCase singularName }}Schema from '../../../api/{{ pascalCase pluralName }}/schemas/{{ camelCase singularName }}';

import {
  Styled{{ pascalCase singularName }}Editor,
  {{ pascalCase singularName }}EditorHeader,
  {{ pascalCase singularName }}EditorTitle,
  {{ pascalCase singularName }}EditorBody,
  {{ pascalCase singularName }}EditorFooter,
} from './Styled{{ pascalCase singularName }}Editor';

const {{ pascalCase singularName }}Editor = ({ doc, history }) => {
  const [saving, setSaving] = useState(false);
  const [remove{{ pascalCase singularName }}] = useMutation(remove{{ pascalCase singularName }}Mutation, {
    ignoreResults: true,
    refetchQueries: [{ query: {{ camelCase singularName }} }],
    awaitRefetchQueries: true,
    onCompleted: () => {
      history.push('/{{ uiFolderName }}');
      message.success(i18n.__('{{ pascalCase pluralName }}.{{ camelCase singularName }}_removed_success'));
    },
    onError: (error) => {
      message.error(error.message);
    },
  });

  const [update{{ pascalCase singularName }}Key] = useMutation(update{{ pascalCase singularName }}KeyMutation, {
    ignoreResults: true,
    onCompleted: () => {
      setTimeout(() => setSaving(false), 1000);
    },
    onError: (error) => {
      message.error(error.message);
    },
  });

  // const [update{{ pascalCase singularName }}] = useMutation(update{{ pascalCase singularName }}Mutation, {
  //   ignoreResults: true,
  //   onCompleted:() => {
  //     setTimeout(() => setSaving(false), 1000);
  //   },
  //   onError:(error) => {
  //     message.error(error.message);
  //   }
  // });

  function handleUpdate{{ pascalCase singularName }}(key, value) {
    // const cleanForm = {{ pascalCase singularName }}Schema.clean(form);
    setSaving(true);

    delay(() => {
      update{{ pascalCase singularName }}Key({
        variables: {
          _id: doc._id,
          key,
          value,
        },
        refetchQueries: [{ query: edit{{ pascalCase singularName }}Query }],
      });
    }, 300);
  }

  function handleSetVisibility(isPublic) {
    setSaving(true);
    update{{ pascalCase singularName }}Key({
      variables: {
        _id: doc._id,
        key: 'isPublic',
        value: (isPublic === 'public').toString(),
      },
    });
  }

  function handleRemove{{ pascalCase singularName }}() {
    Modal.confirm({
      title: i18n.__('{{ pascalCase pluralName }}.confirm_remove_{{ camelCase singularName }}'),
      okText: i18n.__('{{ pascalCase pluralName }}.delete_{{ camelCase singularName }}'),
      okType: 'danger',
      cancelText: i18n.__('{{ camelCase singularName }}.cancel'),
      onOk() {
        remove{{ pascalCase singularName }}({
          variables: {
            _id: doc._id,
          },
        });
      },
      onCancel() {
        console.log('Cancel');
      },
    });
  }

  return (
    <React.Fragment>
      <{{ pascalCase singularName }}EditorHeader className="clearfix">
        <p>
          {saving ? (
            <em>{i18n.__('{{ pascalCase pluralName }}.saving')}</em>
          ) : (
            <span>{i18n.__('{{ pascalCase pluralName }}.last_edit_time', { timeago: timeago(doc.updatedAt) })}</span>
          )}
        </p>

        <Dropdown title={<SettingIcon />} id="set-{{ dashCase singularName }}-public">
          <Menu>
            <Menu.Item key="view" onClick={() => history.push(`/{{ uiFolderName }}/${doc._id}`)}>
              <FileIcon />
              {i18n.__('{{ pascalCase pluralName }}.view_{{ snakeCase singularName }}')}
            </Menu.Item>
            <Menu.Divider />

            <Menu.ItemGroup title={i18n.__('{{ pascalCase pluralName }}.visibility')}>
              <Menu.Item
                className={doc.isPublic && 'active'}
                key="public"
                onClick={() => handleSetVisibility('public')}
              >
                {!doc.isPublic ? <UnlockFilledIcon /> : <UnlockIcon />}
                {i18n.__('{{ pascalCase pluralName }}.public')}
              </Menu.Item>
              <Menu.Item
                className={!doc.isPublic && 'active'}
                key="private"
                onClick={() => handleSetVisibility('private')}
              >
                {!doc.isPublic ? <LockFilledIcon /> : <LockIcon />}
                {i18n.__('{{ pascalCase pluralName }}.private')}
              </Menu.Item>
            </Menu.ItemGroup>

            <Menu.Divider />

            <Menu.Item key="delete" onClick={handleRemove{{ pascalCase singularName }}}>
              <div className="text-danger">{i18n.__('{{ pascalCase pluralName }}.delete_{{ snakeCase singularName }}')}</div>
            </Menu.Item>
          </Menu>
        </Dropdown>
      </{{ pascalCase singularName }}EditorHeader>
      <Styled{{ pascalCase singularName }}Editor>
        <AutoForm
          name="{{ camelCase singularName }}"
          model={doc}
          schema={{{ pascalCase singularName }}Schema}
          onChange={handleUpdate{{ pascalCase singularName }}}
        >
          <{{ pascalCase singularName }}EditorTitle>
            <AutoField name="title" placeholder={i18n.__('{{ pascalCase pluralName }}.title_placeholder')} />
          </{{ pascalCase singularName }}EditorTitle>
          <{{ pascalCase singularName }}EditorBody>
            <LongTextField name="body" placeholder={i18n.__('{{ pascalCase pluralName }}.body_placeholder')} />
          </{{ pascalCase singularName }}EditorBody>
        </AutoForm>
      </Styled{{ pascalCase singularName }}Editor>
      <{{ pascalCase singularName }}EditorFooter className="clearfix">
        <span>
          <svg width="63" height="39" viewBox="0 0 256 158" preserveAspectRatio="xMinYMin meet">
            <path d="M238.371 157.892H18.395C8.431 157.892 0 149.462 0 139.497V18.395C0 8.431 8.431 0 18.395 0h219.21C247.569 0 256 8.431 256 18.395v121.102c0 9.964-7.665 18.395-17.629 18.395zM18.395 12.263c-3.066 0-6.132 3.066-6.132 6.132v121.102c0 3.832 3.066 6.132 6.132 6.132h219.21c3.832 0 6.132-3.066 6.132-6.132V18.395c0-3.832-3.066-6.132-6.132-6.132H18.395zM36.79 121.102V36.79h24.527l24.527 30.66 24.527-30.66h24.527v84.312h-24.527V72.814l-24.527 30.66-24.527-30.66v48.288H36.79zm154.06 0l-36.79-40.623h24.527V36.79h24.527v42.923h24.527l-36.79 41.389z" />
          </svg>
          <p>
            <a
              href="https://www.markdownguide.org/basic-syntax"
              target="_blank"
              rel="noopener noreferrer"
            >
              {i18n.__('{{ pascalCase pluralName }}.body_help')}
            </a>
          </p>
        </span>
      </{{ pascalCase singularName }}EditorFooter>
    </React.Fragment>
  );
};

{{ pascalCase singularName }}Editor.defaultProps = {
  doc: null,
};

{{ pascalCase singularName }}Editor.propTypes = {
  doc: PropTypes.object,
  history: PropTypes.object.isRequired,
};

export default {{ pascalCase singularName }}Editor;
