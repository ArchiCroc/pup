{{#*inline "schemaFields"}}
{{#each this ~}}
  {{~#if this.type }}
    {{#compare this.input 'typeof' 'object'}}
{{> schemaField this.input reference=this.reference namePrefix=../namePrefix keyPrefix=../keyPrefix }}
    {{else}}
{{> schemaField this name=@key  namePrefix=../namePrefix keyPrefix=../keyPrefix}}
    {{/compare}}
  {{/if~}}
{{~/each}}
{{/inline}}
{{#*inline "schemaField"}}
  {{#compare this.input '||' this.fields}}
    {{~#compare this.type '!startsWith' '['}}
{{#compare name 'includes' '.' '||' keyPrefix 'includes' '.'}}'{{keyPrefix}}{{name}}'{{else}}{{keyPrefix}}{{name}}{{/compare}}: {
  {{> schemaFieldBody name=(concat namePrefix @key)}}
},
      {{#if this.fields}}
{{> schemaFields this.fields namePrefix=(concat name "_") keyPrefix=(concat name ".") }}      
      {{/if}}
    {{else}}
{{#compare name 'includes' '.' '||' keyPrefix 'includes' '.'}}'{{keyPrefix}}{{name}}'{{else}}{{keyPrefix}}{{name}}{{/compare}}: {
  {{> arrayFieldBody name=(concat namePrefix @key)}}
},
'{{name}}.$': {
  {{> schemaFieldBody name=(concat namePrefix @key) isArrayKey=true}}
},
      {{#if this.fields}}
{{> schemaFields this.fields namePrefix=(concat name "_") keyPrefix=(concat name ".$.") }}      
      {{/if}}
    {{/compare}}
  {{/compare}}
{{/inline}}
{{#*inline "schemaFieldBody"}}
type: {{cleanSimpleSchemeType this.type}},
{{#compare this.input '!=' 'Hidden'}}
label: () => i18n.__('{{ pascalCase @root.name }}.{{snakeCase name}}_label'),
{{/compare}}

{{~#if this.validate.optional}}
optional: true,
{{/if}}
{{#if this.validate.regEx}}
regEx: {{this.validate.regEx}},
{{/if}}
{{#if this.validate.max}}
max: {{this.validate.max}},
{{/if}}
{{#if this.validate.min}}
min: {{this.validate.min}},
{{/if}}
{{#if this.validate.blackbox}}
blackbox: {{this.validate.blackbox}},
{{/if}}
{{#if this.clean}}
autoValue() {
  if (this.value != null) {
    return clean{{pascalCase name}}(this.value);
  }
  return {{#if this.defaultValue}}{{quoteIfString this.defaultValue }}{{else}}this.value{{/if}};
},
{{else}}
  {{#compare (cleanSimpleSchemeType this.type) '===' 'Mongo.ObjectID'}}
autoValue() {
  return parseObjectID(this.value);
},
blackbox: true,
  {{/compare}}
{{/if}}
{{#compare this.type '!==' '[Object]' '&&' this.defaultValue '!typeof' 'undefined'}}
{{#unless isArrayKey}}
{{#unless this.clean}}
defaultValue: {{quoteIfString this.defaultValue }},
{{/unless}}
{{/unless}}
{{/compare}}
{{#if this.choices}}
  {{#compare this.choices 'typeof' 'object' '||' this.choices 'typeof' 'array'}}
allowedValues: [{{#each this.choices}}{{quoteIfString this}}{{#unless @last}}, {{/unless}}{{/each}}],
  {{else}}
allowedValues: {{this.choices}},
  {{/compare}}
{{/if}}
uniforms: {
  {{#compare this.input '==' 'Hidden'}}
  type: 'hidden',
  {{else}}
    {{#compare this.type '!=' 'Boolean'}}
  placeholder: () => i18n.__('{{ pascalCase @root.name }}.{{snakeCase name}}_placeholder'),
    {{/compare}}
  {{/compare}}
  {{#each uniforms}}
  {{@key}}: {{quoteIfString this }},
  {{/each}}
  {{#if this.choices}}
    {{#compare this.choices 'typeof' 'object'}}
  transform: (value) => i18n.__(`{{ pascalCase @root.name }}.{{snakeCase name}}_${value}`),
    {{/compare}}
  {{/if}}
  {{!-- for cross references --}}
  {{#if this.reference.query}}
  query: '{{this.reference.query}}',
  {{/if}}
  {{#if this.reference.edges}}
  edges: '{{this.reference.edges}}',
  {{/if}}
  {{#if this.reference.labelKey}}
  initialLabelKey: '{{@key}}',
  labelKey: '{{this.reference.labelKey}}',
  {{/if}}
  {{#if this.reference.valueKey}}
  valueKey: '{{this.reference.valueKey}}',
  {{/if}}
},
{{/inline}}
{{#*inline "arrayFieldBody"}}
type: Array,
{{#compare this.input '!=' 'Hidden'}}
label: () => i18n.__('{{ pascalCase @root.name }}.{{snakeCase name}}_label'),
{{/compare}}
{{#compare this.defaultValue '!==' undefined }}
defaultValue: {{quoteIfString this.defaultValue }},
{{/compare}}
{{~#if this.validate.optional}}
optional: true,
{{/if}}
{{#if this.validate.minCount}}
minCount: {{this.validate.minCount}},
{{/if}}
{{#if this.validate.maxCount}}
maxCount: {{this.validate.maxCount}},
{{/if}}
uniforms: {
  {{#compare this.input '==' 'Hidden'}}
  type: 'hidden',
  {{else}}
    {{#compare this.type '!=' 'Boolean'}}
  placeholder: () => i18n.__('{{ pascalCase @root.name }}.{{snakeCase name}}_placeholder'),
    {{/compare}}
  {{/compare}}
  {{#each this.uniforms}}
  {{@key}}: {{quoteIfString this.defaultValue }},
  {{/each}}
  {{#compare this.type 'startsWith' '[' '&&' (stripBrackets this.type) 'in' 'Select|CrossReferenceSearch|CrossReferenceSelect' }}
  multiple: true  
  {{/compare}}
},
{{/inline~}}


{{#compare fieldTypes 'includes' 'ObjectID'}}
import { Mongo } from 'meteor/mongo';
{{/compare}}
import Uniforms from 'uniforms';
import SimpleSchema from 'simpl-schema';
import i18n from 'meteor/universe:i18n';
/* #### PLOP_IMPORTS_START #### */
{{#each schema.schemaImports }}
{{{this}}};
{{/each}}
/* #### PLOP_IMPORTS_END #### */
{{#compare fieldTypes 'includes' 'ObjectID'}}
import parseObjectID from '{{apiPathOffset}}../../../libs/parseObjectID';
{{/compare}}

{{#each schema.fields }}
  {{#if this.clean}}
const clean{{pascalCase @key}} = {{{this.clean}}};
  {{/if}}
{{/each}}

const {{ pascalCase singularName }}Schema = new SimpleSchema({
  {{> schemaFields schema.fields}}
  /* #### PLOP_SCHEMA_START #### */
  /* #### PLOP_SCHEMA_END #### */
});

export default {{ pascalCase singularName }}Schema;
