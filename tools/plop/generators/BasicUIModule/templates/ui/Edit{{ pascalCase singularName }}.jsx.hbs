import React from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery /* , useMutation */ } from '@apollo/react-hooks';
import Divider from 'antd/lib/divider';
import PageBreadcrumbs, { Breadcrumb } from '{{uiPathOffset}}../components/PageBreadcrumbs';
import PageHeader from '{{uiPathOffset}}../components/PageHeader';
import {{ pascalCase singularName }}Editor from './components/{{ pascalCase singularName }}Editor';
import Loading from '{{uiPathOffset}}../components/Loading';
import NotFound from '{{uiPathOffset}}../pages/NotFound';
import Remove{{ pascalCase singularName }}Button from './components/Remove{{ pascalCase singularName }}Button';
import hasRole from '{{uiPathOffset}}../../modules/hasRole';

import { edit{{ pascalCase singularName }} as {{ camelCase singularName }}Query } from './queries/{{ pascalCase pluralName }}.gql';

import Styled{{ pascalCase pluralName }} from './Styled{{ pascalCase pluralName }}';

const Edit{{ pascalCase singularName }} = ({ history, match, roles }) => {
  const { loading, data: { {{ camelCase singularName }} = undefined } = {} } = useQuery({{ camelCase singularName }}Query, { 
    variables: { {{ urlFieldKey }}: match.params.{{ urlFieldKey }} } 
  });

  return (
    <Styled{{ pascalCase pluralName }} md={16} lg={12} xl={10} xxl={8}>
      <PageBreadcrumbs>
        <Breadcrumb to="/{{ uiFolderName }}">{i18n.__('{{ pascalCase pluralName }}.{{ snakeCase shortSingularName }}_plural')}</Breadcrumb>
        <Breadcrumb>{i18n.__('{{ pascalCase pluralName }}.edit_{{ snakeCase shortSingularName }}')}</Breadcrumb>
      </PageBreadcrumbs>
      <PageHeader title={i18n.__('{{ pascalCase pluralName }}.edit_{{ snakeCase shortSingularName }}')} />
          {loading ? (
            <Loading />
          ) : (
            <>
              { {{~ camelCase singularName }} ? (
                <{{ pascalCase singularName }}Editor doc={ {{~ camelCase singularName ~}} } history={history} roles={roles} /> 
              ) : (
                <NotFound />
              )}
            </>
          )}
          <Divider />
          { {{~ camelCase singularName }} && {{#if schema.permissions.delete}} hasRole(roles, [{{#each schema.permissions.delete }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]) && {{/if}}(
              <Remove{{ pascalCase singularName }}Button 
                {{primaryFieldKey}}={ {{~ camelCase singularName }}.{{primaryFieldKey ~}} } 
                {{labelKeyKey}}={ {{~ camelCase singularName}}.{{labelKeyKey ~}} } 
                history={history} 
              />
            )}

    </Styled{{ pascalCase pluralName }}>
  );
};

Edit{{ pascalCase singularName }}.propTypes = {
  history: PropTypes.object.isRequired,
  match: PropTypes.object.isRequired,
  roles: PropTypes.array.isRequired,
};

export default Edit{{ pascalCase singularName }};
