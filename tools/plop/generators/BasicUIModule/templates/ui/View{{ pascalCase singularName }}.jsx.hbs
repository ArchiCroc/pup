{{#*inline "renderObject"}}

{{/inline}}
{{#*inline "renderArray"}}

{{/inline}}
{{#*inline "fieldKey" ~}}
  {{~ name }}.{{@key~}}
{{~/inline}}
{{#*inline "fieldKeyAndDataIndex" ~}}
  {{~#if this.dataIndex}}{{~> fieldKey }} && {{/if}}{{~> fieldKey }}{{#if this.dataIndex}}.{{ this.dataIndex }}{{/if ~}}
{{~/inline}}
{{#*inline "fieldKeyDataIndex" ~}}
  {{~> fieldKey }}{{#if this.dataIndex}}.{{ this.dataIndex }}{{/if ~}}
{{~/inline}}
{{#*inline "renderValue"}}
  {{#compare this.choices 'typeof' 'object'}}
{ {{~> fieldKeyAndDataIndex }} && i18n.__(`{{ pascalCase @root.pluralName }}.{{ snakeCase @key }}_${ {{> fieldKeyDataIndex ~}} }`)}
  {{else}}
    {{#compare this.type '===' 'Object'}}
{ {{~> fieldKeyAndDataIndex }} && (
  <>
{{#each this.fields}}
    <div>
      {i18n.__('{{pascalCase @root.pluralName}}.{{@../key}}_{{@key}}_label')}: {{> renderValue name=(concat ../name '.' @../key)}}
    </div>
{{/each}}
  </>
)}
    {{/compare}}
    {{#compare this.type '===' '[Object]'}}
{ {{~> fieldKeyAndDataIndex }} && {{> fieldKeyDataIndex}}.map((item, index) => {
  return (
    <React.Fragment key={index}>
{{#each this.fields}}
      <div>
        {i18n.__('{{pascalCase @root.pluralName}}.{{@../key}}_{{@key}}_label')}: {{> renderValue name="item"}}
      </div>
{{/each}}
    </React.Fragment>
   )
})}
    {{/compare}}
    {{#compare this.type '===' 'Boolean'}}
{ {{~> fieldKeyAndDataIndex }} && i18n.__(`{{ pascalCase name }}.${ {{~> fieldKeyDataIndex}}? 'yes' : 'no'}`)}
    {{/compare}}
    {{#compare this.type 'in' 'DateTime' }}
{ {{~> fieldKeyAndDataIndex }} && <FormatDate timestamp={ {{~> fieldKeyDataIndex ~}} }{{#compare this.input '===' 'Date' }} format="MMMM Do, YYYY"{{/compare}} />}
    {{/compare}}
    {{#compare this.type '!in' '[Object]' '&&' this.type 'startsWith' '[' }}
{ {{~> fieldKeyAndDataIndex }} && {{ camelCase (singular name) }}{{#if this.dataIndex}}.map((item) => item.{{ this.dataIndex }}){{/if}}.join(', ')}
    {{/compare}}
    {{#compare this.type '!in' 'Object|DateTime|Boolean' '&&' this.type '!startsWith' '[' }}
{ {{~> fieldKeyAndDataIndex ~}} }
    {{/compare ~}}
  {{~/compare~}}
{{/inline ~}}

import React from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery } from '@apollo/react-hooks';
import Row from 'antd/lib/row';
import Col from 'antd/lib/col';
import Descriptions from 'antd/lib/descriptions';
import FormatDate from '{{uiPathOffset}}../components/FormatDate';
import PageHeader from '{{uiPathOffset}}../components/PageHeader';
import Loading from '{{uiPathOffset}}../components/Loading';
import NotFound from '{{uiPathOffset}}../pages/NotFound';
{{#compare hasFieldPermissions '||' schema.permissions.update}}
import hasRole from '{{uiPathOffset}}../../modules/hasRole';
{{/compare}}

import Edit{{ pascalCase singularName }}Button from './components/Edit{{ pascalCase singularName }}Button'

import { {{ camelCase singularName }} as {{ camelCase singularName }}Query } from './queries/{{ pascalCase pluralName }}.gql';

import StyledView{{ pascalCase singularName }} from './StyledView{{ pascalCase singularName }}';

const View{{ pascalCase singularName }} = ({ match{{#compare hasFieldPermissions '||' schema.permissions.update}}, roles{{/compare}} }) => {
  const { loading, data: { {{ camelCase singularName }} } = {} } = useQuery({{ camelCase singularName }}Query, { variables: { {{ urlFieldKey }}: match.params.{{ urlFieldKey }} } });

  return (
    <StyledView{{ pascalCase singularName }}>
      <PageHeader title={i18n.__('{{ pascalCase pluralName }}.view_{{ snakeCase shortSingularName }}')} />
      { {{~ camelCase singularName }}{{#if schema.permissions.update}} && hasRole(roles, [{{#each schema.permissions.update }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]){{/if}} && (
        <p>
          <Edit{{ pascalCase singularName }}Button {{urlFieldKey}}={ {{~ camelCase singularName }}.{{ urlFieldKey ~}} } />
        </p>
      )}
      <Row type="flex" justify="center">
        <Col xs={24} sm={24} md={24} lg={24}>
          {loading ? (
            <Loading />
          ) : (
            <>
              { {{~ camelCase singularName }} ? (
                <View{{ pascalCase singularName }}Fields {{ camelCase singularName }}={ {{~ camelCase singularName ~}} }{{#if hasFieldPermissions}} roles={roles}{{/if}} />
              ) : (
                <NotFound />
              )}
            </>
          )}
        </Col>
      </Row>
    </StyledView{{ pascalCase singularName }}>
  );
};

View{{ pascalCase singularName }}.propTypes = {
  // history: PropTypes.object.isRequired,
  match: PropTypes.object.isRequired,
{{#compare hasFieldPermissions '||' schema.permissions.update}}
  roles: PropTypes.array.isRequired,
{{/compare}}
};

const View{{ pascalCase singularName }}Fields = ({ {{ camelCase singularName }}{{#if hasFieldPermissions}}, roles{{/if}} }) => {
  return (
    <Descriptions bordered column={1}>
{{#each schema.fields ~}}
  {{#compare this.input '!==' 'Hidden' '&&' this.showInDetailView '!==' false}}
      <Descriptions.Item label={i18n.__('{{ pascalCase @root.name }}.{{ snakeCase @key }}')}>
        {{> renderValue name=(camelCase @root.singularName)}}
      </Descriptions.Item>
  {{/compare~}}
{{~/each}}
    </Descriptions>
  );
};

View{{ pascalCase singularName }}Fields.propTypes = {
  {{ camelCase singularName }}: PropTypes.object.isRequired,
{{#if hasFieldPermissions}}
  roles: PropTypes.array.isRequired,
{{/if}}
};

export default View{{ pascalCase singularName }};
