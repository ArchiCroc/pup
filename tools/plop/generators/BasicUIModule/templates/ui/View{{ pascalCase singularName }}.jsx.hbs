{{#*inline "renderObject"}}

{{/inline}}
{{#*inline "renderArray"}}

{{/inline}}
{{#*inline "fieldKey" ~}}
  {{~ name }}.{{@key~}}
{{~/inline}}
{{#*inline "fieldKeyAndDataIndex" ~}}
  {{~#if dataIndex}}{{~> fieldKey }} && {{/if}}{{~> fieldKey }}{{#if dataIndex}}.{{ dataIndex }}{{/if ~}}
{{~/inline}}
{{#*inline "fieldKeyDataIndex" ~}}
  {{~> fieldKey }}{{#if dataIndex}}.{{ dataIndex }}{{/if}}
{{~/inline}}
{{#*inline "renderValue"}}
  {{#if this.detailTemplateFile}}
    {{#if dataIndex}}
{ {{~> (lookup . 'detailTemplateFile' ) value=(concat name '.' @key '.' dataIndex) parent=name key=@key ~}} }
    {{else}}
{ {{~> (lookup . 'detailTemplateFile' ) value=(concat name '.' @key) parent=name key=@key ~}} } 
{{/if}}
  {{else}}
    {{#if this.detailTemplate}}
{{render this.detailTemplate}}
    {{else}}
{{> renderGenericValue}}
    {{/if}}
  {{/if}}
{{~/inline}}
{{#*inline "renderGenericValue"}}
  {{#compare choices 'typeof' 'object'}}
{ {{~> fieldKeyAndDataIndex }} && i18n.__(`{{ pascalCase @root.pluralName }}.{{ snakeCase @key }}_${ {{> fieldKeyDataIndex ~}} }`)}
  {{else}}
    {{#compare type '===' 'Object'}}
{ {{~> fieldKeyAndDataIndex }} && (
  <>
{{#each fields}}
    <div>
      {i18n.__('{{pascalCase @root.pluralName}}.{{@../key}}_{{@key}}_label')}: {{> renderValue name=(concat ../name '.' @../key)}}
    </div>
{{/each}}
  </>
)}
    {{/compare}}
    {{#compare type '===' '[Object]'}}
{ {{~> fieldKeyAndDataIndex }} && {{> fieldKeyDataIndex}}.map((item, index) => {
  return (
    <React.Fragment key={index}>
{{#each fields}}
      <div>
        {i18n.__('{{pascalCase @root.pluralName}}.{{@../key}}_{{@key}}_label')}: {{> renderValue name="item"}}
      </div>
{{/each}}
    </React.Fragment>
   )
})}
    {{/compare}}
    {{#compare type '===' 'Boolean'}}
{ {{~> fieldKeyAndDataIndex }} && i18n.__(`{{ pascalCase @root.pluralName }}.${ {{~> fieldKeyDataIndex}}? 'yes' : 'no'}`)}
    {{/compare}}
    {{#compare type 'in' 'DateTime' }}
{ {{~> fieldKeyAndDataIndex }} && <FormatDate timestamp={ {{~> fieldKeyDataIndex ~}} }{{#compare input '===' 'Date' }} format="MMMM Do, YYYY"{{/compare}} />}
    {{/compare}}
    {{#compare type '!in' '[Object]' '&&' type 'startsWith' '[' }}
{ {{~> fieldKeyAndDataIndex }} && {{> fieldKeyDataIndex}}{{#if dataIndex}}.map((item) => item.{{ dataIndex }}){{/if}}.join(', ')}
    {{/compare}}
    {{#compare type '!in' 'Object|DateTime|Boolean' '&&' type '!startsWith' '[' }}
{ {{~> fieldKeyAndDataIndex ~}} }
    {{/compare ~}}
  {{~/compare~}}
{{/inline ~}}

import React from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery } from '@apollo/react-hooks';
import Descriptions from 'antd/lib/descriptions';
{{#uniqueImports}}
import FormatDate from '{{uiPathOffset}}../components/FormatDate';
import PageBreadcrumbs, { Breadcrumb } from '{{uiPathOffset}}../components/PageBreadcrumbs';
import PageHeader from '{{uiPathOffset}}../components/PageHeader';
import Loading from '{{uiPathOffset}}../components/Loading';
import NotFound from '{{uiPathOffset}}../pages/NotFound';
  {{#compare hasFieldPermissions '||' schema.permissions.update}}
import hasRole from '{{uiPathOffset}}../../modules/hasRole';
  {{/compare}}
  {{#each schema.fields ~}}
    {{#compare this.input '!==' 'Hidden' '&&' this.showInDetailView '!==' false}}
      {{#if this.detailTemplateFile}}
{{> (lookup . 'detailTemplateFile' ) import=true}} 
      {{/if}}
    {{/compare~}}
  {{~/each}}
{{/uniqueImports}}

import Edit{{ pascalCase singularName }}Button from './components/Edit{{ pascalCase singularName }}Button';

import { {{ camelCase singularName }} as {{ camelCase singularName }}Query } from './queries/{{ pascalCase pluralName }}.gql';

import Styled{{ pascalCase pluralName }} from './Styled{{ pascalCase pluralName }}';

const View{{ pascalCase singularName }} = ({ match{{#compare hasFieldPermissions '||' schema.permissions.update}}, roles{{/compare}} }) => {
  const { loading, data: { {{ camelCase singularName }} } = {} } = useQuery({{ camelCase singularName }}Query, { variables: { {{ urlFieldKey }}: match.params.{{ urlFieldKey }} } });

  return (
    <Styled{{ pascalCase pluralName }}>
      <PageBreadcrumbs>
        <Breadcrumb to="/{{ uiFolderName }}">{i18n.__('{{ pascalCase pluralName }}.{{ snakeCase shortSingularName }}_plural')}</Breadcrumb>
        <Breadcrumb>{i18n.__('{{ pascalCase pluralName }}.view_{{ snakeCase shortSingularName }}')}</Breadcrumb>
      </PageBreadcrumbs>
      <PageHeader title={i18n.__('{{ pascalCase pluralName }}.view_{{ snakeCase shortSingularName }}')} />
      { {{~ camelCase singularName }}{{#if schema.permissions.update}} && hasRole(roles, [{{#each schema.permissions.update }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]){{/if}} && (
        <p>
          <Edit{{ pascalCase singularName }}Button {{urlFieldKey}}={ {{~ camelCase singularName }}.{{ urlFieldKey ~}} } />
        </p>
      )}
      {loading ? (
        <Loading />
      ) : (
        <>
          { {{~ camelCase singularName }} ? (
            <View{{ pascalCase singularName }}Fields {{ camelCase singularName }}={ {{~ camelCase singularName ~}} }{{#if hasFieldPermissions}} roles={roles}{{/if}} />
          ) : (
            <NotFound />
          )}
        </>
      )}
    </Styled{{ pascalCase pluralName }}>
  );
};

View{{ pascalCase singularName }}.propTypes = {
  // history: PropTypes.object.isRequired,
  match: PropTypes.object.isRequired,
{{#compare hasFieldPermissions '||' schema.permissions.update}}
  roles: PropTypes.array.isRequired,
{{/compare}}
};

const View{{ pascalCase singularName }}Fields = ({ {{ camelCase singularName }}{{#if hasFieldPermissions}}, roles{{/if}} }) => {
  return (
    <Descriptions bordered column={1}>
{{#each schema.fields ~}}
  {{#compare this.input '!==' 'Hidden' '&&' this.showInDetailView '!==' false}}
      <Descriptions.Item label={i18n.__('{{ pascalCase @root.name }}.{{ snakeCase @key }}')}>
        {{> renderValue name=(camelCase @root.singularName)}}
      </Descriptions.Item>
  {{/compare~}}
{{~/each}}
    </Descriptions>
  );
};

View{{ pascalCase singularName }}Fields.propTypes = {
  {{ camelCase singularName }}: PropTypes.object.isRequired,
{{#if hasFieldPermissions}}
  roles: PropTypes.array.isRequired,
{{/if}}
};

export default View{{ pascalCase singularName }};
