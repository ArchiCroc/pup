import React from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery } from '@apollo/react-hooks';
import Row from 'antd/lib/row';
import Col from 'antd/lib/col';
import Descriptions from 'antd/lib/descriptions';
import FormatDate from '{{uiPathOffset}}../components/FormatDate';
import PageHeader from '{{uiPathOffset}}../components/PageHeader';
import Loading from '{{uiPathOffset}}../components/Loading';
import NotFound from '{{uiPathOffset}}../pages/NotFound';
{{#compare hasFieldPermissions '||' schema.permissions.update}}
import hasRole from '{{uiPathOffset}}../../modules/hasRole';
{{/compare}}

import Edit{{ pascalCase singularName }}Button from './components/Edit{{ pascalCase singularName }}Button'

import { {{ camelCase singularName }} as {{ camelCase singularName }}Query } from './queries/{{ pascalCase pluralName }}.gql';

import StyledView{{ pascalCase singularName }} from './StyledView{{ pascalCase singularName }}';

const View{{ pascalCase singularName }} = ({ match{{#compare hasFieldPermissions '||' schema.permissions.update}}, roles{{/compare}} }) => {
  const { loading, data: { {{ camelCase singularName }} } = {} } = useQuery({{ camelCase singularName }}Query, { variables: { {{ urlKeyField }}: match.params.{{ urlKeyField }} } });

  return (
    <StyledView{{ pascalCase singularName }}>
      <PageHeader title={i18n.__('{{ pascalCase pluralName }}.view_{{ snakeCase singularName }}')} />
      { {{~ camelCase singularName }}{{#if schema.permissions.update}} && hasRole(){{/if}} && (
        <p>
          <Edit{{ pascalCase singularName }}Button {{urlKeyField}}={ {{~ camelCase singularName }}.{{ urlKeyField ~}} } />
        </p>
      )}
      <Row type="flex" justify="center">
        <Col xs={24} sm={24} md={24} lg={24}>
          {loading ? (
            <Loading />
          ) : (
            <>
              { {{~ camelCase singularName }} ? (
                <View{{ pascalCase singularName }}Fields {{ camelCase singularName }}={ {{~ camelCase singularName ~}} } {{#if hasFieldPermissions}}roles={roles} {{/if}} />
              ) : (
                <NotFound />
              )}
            </>
          )}
        </Col>
      </Row>
    </StyledView{{ pascalCase singularName }}>
  );
};

View{{ pascalCase singularName }}.propTypes = {
  // history: PropTypes.object.isRequired,
  match: PropTypes.object.isRequired,
{{#compare hasFieldPermissions '||' schema.permissions.update}}
  roles: PropTypes.array.isRequired,
{{/compare}}
};

const View{{ pascalCase singularName }}Fields = ({ {{ camelCase singularName }}{{#if hasFieldPermissions}}, roles{{/if}} }) => {
  return (
    <Descriptions bordered column={1}>
{{#each schema.fields ~}}
  {{#compare this.input '!==' 'Hidden' '&&' this.showInDetailView '!==' false}}
      <Descriptions.Item label={i18n.__('{{ pascalCase @root.name }}.{{ snakeCase @key }}')}>
      {{#compare this.choices 'typeof' 'object'}}
        {i18n.__(`{{ pascalCase @root.name }}.{{ snakeCase @key }}_${ {{~#if this.dataIndex}}{{ this.dataIndex }} && {{/if}}{{ camelCase (singular @root.name) }}.{{#if this.dataIndex}}{{ this.dataIndex }}{{else}}{{ @key }}{{/if ~}} }`)}
      {{else}}
        {{#compare this.type '===' 'Boolean'}}
        { {{~ camelCase (singular @root.name) }}.{{@key}} && i18n.__(`{{ pascalCase @root.name }}.${ {{~ camelCase (singular @root.name) }}.{{@key}}{{#if this.dataIndex}}.{{ this.dataIndex }}{{/if}}? 'yes' : 'no'}`)}
        {{/compare}}
        {{#compare this.type 'in' 'DateTime' }}
        { {{~ camelCase (singular @root.name) }}.{{@key}} && <FormatDate timestamp={ {{~ camelCase (singular @root.name) }}.{{ @key }}{{#if this.dataIndex}}.{{ this.dataIndex }}{{/if ~}} }{{#compare this.input '===' 'Date' }} format="MMMM Do, YYYY"{{/compare}} />}
        {{/compare}}
        {{#compare this.type 'startsWith' '[' }}
        { {{~ camelCase (singular @root.name) }}.{{ @key }} && {{ camelCase (singular @root.name) }}.{{ @key }}{{#if this.dataIndex}}.map((item) => item.{{ this.dataIndex }}){{/if}}.join(', ')}
        {{/compare}}
        {{#compare this.type '!in' 'DateTime|Boolean' '&&' this.type '!startsWith' '[' }}
        { {{~#if this.dataIndex}}{{ camelCase (singular @root.name) }}.{{ @key }} && {{/if}}{{ camelCase (singular @root.name) }}.{{ @key }}{{#if this.dataIndex}}.{{ this.dataIndex }}{{/if ~}} }
        {{/compare}}
      {{/compare}}
      </Descriptions.Item>
  {{/compare~}}
{{~/each}}
    </Descriptions>
  );
};

View{{ pascalCase singularName }}Fields.propTypes = {
  {{ camelCase singularName }}: PropTypes.object.isRequired,
{{#if hasFieldPermissions}}
  roles: PropTypes.array.isRequired,
{{/if}}
  
};

export default View{{ pascalCase singularName }};
