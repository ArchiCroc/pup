{{#*inline "renderObject"}}

{{/inline}}
{{#*inline "renderArray"}}

{{/inline}}
{{#*inline "fieldKey" ~}}
  {{~ name }}.{{@key~}}
{{~/inline}}
{{#*inline "fieldKeyAndDataIndex" ~}}
  {{~> fieldKey }}{{#if dataIndex}}?.{{ dataIndex }}{{/if ~}}
{{~/inline}}
{{#*inline "fieldKeyDataIndex" ~}}
  {{~> fieldKey }}{{#if dataIndex}}.{{ dataIndex }}{{/if}}
{{~/inline}}
{{#*inline "renderValue"}}
  {{#if this.detailTemplateFile}}
    {{#if dataIndex}}
{{~> (lookup . 'detailTemplateFile' ) value=(concat name '.' @key '.' dataIndex) parent=name key=@key ~}}
    {{else}}
{{~> (lookup . 'detailTemplateFile' ) value=(concat name '.' @key) parent=name key=@key ~}}
{{/if}}
  {{else}}
    {{#if this.detailTemplate}}
{{render this.detailTemplate}}
    {{else}}
{{> renderGenericValue ~}}
    {{/if}}
  {{/if}}
{{~/inline}}
{{#*inline "renderGenericValue"}}
  {{#compare choices 'typeof' 'object'}}
{ {{~> fieldKeyAndDataIndex }} && i18n.__(`{{ pascalCase @root.pluralName }}.{{ snakeCase @key }}_${ {{> fieldKeyDataIndex ~}} }`)}
  {{else}}
    {{#compare type '===' 'Object'}}
{ {{~> fieldKeyAndDataIndex }} && (
  <>
{{#each fields}}
    <div>
      {i18n.__('{{pascalCase @root.pluralName}}.{{@../key}}_{{@key}}_label')}: {{> renderValue name=(concat ../name '.' @../key)}}
    </div>
{{/each}}
  </>
)}
    {{/compare}}
    {{#compare type '===' '[Object]'}}
{ {{~> fieldKeyAndDataIndex }} && {{> fieldKeyDataIndex}}.map((item, index) => (
  <React.Fragment key={index}>
{{#each fields}}
    <div>
      {i18n.__('{{pascalCase @root.pluralName}}.{{@../key}}_{{@key}}_label')}: {{> renderValue name="item" ~}}
    </div>
{{/each}}
  </React.Fragment>
))}
    {{/compare}}
    {{#compare type '===' 'Boolean'}}
{ {{~#if dataIndex}}{{> fieldKeyAndDataIndex }} && {{/if}}i18n.__(`{{ pascalCase @root.pluralName }}.${ {{~> fieldKeyDataIndex}} ? 'yes' : 'no'}`)}
    {{/compare}}
    {{#compare type '!in' '[Object]' '&&' type 'startsWith' '[' }}
{ {{~> fieldKey }} && {{> fieldKey}}{{#if dataIndex}}.map((item) => item.{{ dataIndex }}){{/if}}.join(', ')}
    {{/compare}}
    {{#compare type '!in' 'Object|DateTime|Boolean' '&&' type '!startsWith' '[' }}
{ {{~> fieldKeyAndDataIndex ~}} }
    {{/compare ~}}
  {{~/compare~}}
{{/inline ~}}
import React from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery } from '@apollo/client';
{{#uniqueImports}}
import { useParams } from 'react-router-dom';
import Descriptions from 'antd/lib/descriptions';
import PageBreadcrumbs, { Breadcrumb } from '{{uiPathOffset}}../components/PageBreadcrumbs';
import PageHeader from '{{uiPathOffset}}../components/PageHeader';
import Loading from '{{uiPathOffset}}../components/Loading';
import NotFound from '{{uiPathOffset}}../pages/NotFound';
  {{#compare hasFieldPermissions '||' schema.permissions.update}}
import hasRole from '{{uiPathOffset}}../../libs/hasRole';
  {{/compare}}
  {{#each schema.fields ~}}
    {{#compare this.input '!==' 'Hidden' '&&' this.showInDetailView '!==' false}}
      {{#if this.detailTemplateFile}}
{{> (lookup . 'detailTemplateFile' ) template='import' uiPathOffset=@root.uiPathOffset }} 
      {{/if}}
    {{/compare~}}
  {{~/each}}
{{#> paramsImport}}
  {{#each schema.fields}}
    {{#if this.filterable}}
      {{> (lookup . 'filterTemplateFile' ) template='ui/paramVariables'}}
    {{/if}}
  {{/each}}
{{/paramsImport}}
{{#each schema.detailImports}}
{{{this}}}
{{/each}}
{{/uniqueImports}}

import Edit{{ pascalCase singularName }}Button from './components/Edit{{ pascalCase singularName }}Button';

import { {{ camelCase singularName }} as {{ camelCase singularName }}Query } from './queries/{{ pascalCase pluralName }}.gql';

import Styled{{ pascalCase pluralName }} from './Styled{{ pascalCase pluralName }}';

function View{{ pascalCase singularName }}({{#compare hasFieldPermissions '||' schema.permissions.update}}{ roles }{{/compare}}) {
  const {{#prettyProps}} 
    {{ urlFieldKey }},
{{#each schema.fields}}
  {{#if this.filterable}}
    {{> (lookup . 'filterTemplateFile' ) template='ui/paramVariables'}}
  {{/if}}
{{/each}}  
  {{/prettyProps}} = useParams();

  const { loading, data: { {{ camelCase singularName }} } = {} } = useQuery({{ camelCase singularName }}Query, { variables: { {{ urlFieldKey }} } });

  return (
    <Styled{{ pascalCase pluralName }}>
      {loading ? (
        <Loading />
      ) : (
        <>
          <PageBreadcrumbs>
            <Breadcrumb to={{#quoteStringForJSX}}{{ convertParamsToTemplateVars uiRouteBasePath }}{{/quoteStringForJSX}}>{i18n.__('{{ pascalCase pluralName }}.{{ snakeCase shortSingularName }}_plural')}</Breadcrumb>
            <Breadcrumb>{ {{~#if schema.singleItemTitle}}{{{schema.singleItemTitle}}}{{else}}{{~ camelCase singularName }}.{{labelKeyKey ~}}{{#if labelKey.dataIndex}}.{{labelKey.dataIndex}}{{/if}}{{/if~}} }</Breadcrumb>
          </PageBreadcrumbs>
          <PageHeader title={ {{~#if schema.singleItemTitle}}{{{schema.singleItemTitle}}}{{else}}{{~ camelCase singularName }}.{{labelKeyKey ~}}{{/if~}} } />
          { {{~ camelCase singularName }}{{#if schema.permissions.update}} && hasRole(roles, [{{#each schema.permissions.update }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]){{/if}} && (
            <p>
              <Edit{{ pascalCase singularName }}Button 
                {{urlFieldKey}}={ {{~ camelCase singularName }}.{{ urlFieldKey ~}} } 
{{#each schema.fields}}
  {{#if this.filterable}}
                {{> (lookup . 'filterTemplateFile' ) template='ui/componentProps'}}
  {{/if}}
{{/each}}
              />
            </p>
          )}
          { {{~ camelCase singularName }} ? (
            <>
              <View{{ pascalCase singularName }}Fields 
              {{ camelCase singularName }}={ {{~ camelCase singularName ~}} }
{{#if hasFieldPermissions}} 
              roles={roles}
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
              {{> (lookup . 'filterTemplateFile' ) template='ui/componentProps'}}
  {{/if}}
{{/each}}/> 
              {{{schema.detailAddtionalContent}}}
            </>
          ) : (
            <NotFound />
          )}
        </>
      )}
    </Styled{{ pascalCase pluralName }}>
  );
}

{{#compare hasFieldPermissions '||' schema.permissions.update}}
View{{ pascalCase singularName }}.propTypes = {
  roles: PropTypes.array.isRequired,
};

{{/compare}}
const View{{ pascalCase singularName }}Fields = ({{#prettyProps}}  
  {{ camelCase singularName }},
{{#if hasFieldPermissions}}
  roles,
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
  {{> (lookup . 'filterTemplateFile' ) template='ui/paramVariables'}}
  {{/if}}
{{/each}}
{{/prettyProps}}) => (
  <Descriptions bordered column={1}>
{{#each schema.fields ~}}
  {{#compare this.input '!==' 'Hidden' '&&' this.showInDetailView '!==' false}}
    <Descriptions.Item label={i18n.__('{{ pascalCase @root.name }}.{{ snakeCase @key }}')}>
      {{> renderValue name=(camelCase @root.singularName)}}
    </Descriptions.Item>
  {{/compare~}}
{{~/each}}
  </Descriptions>
);

View{{ pascalCase singularName }}Fields.propTypes = {
  {{ camelCase singularName }}: PropTypes.object.isRequired,
{{#if hasFieldPermissions}}
  roles: PropTypes.array.isRequired,
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
  {{> (lookup . 'filterTemplateFile' ) template='ui/paramPropTypes'}}
  {{/if}}
{{/each}}
};

export default View{{ pascalCase singularName }};
