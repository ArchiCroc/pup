import React from 'react';
import PropTypes from 'prop-types';
import { useHistory } from 'react-router-dom';
import { useMutation } from '@apollo/react-hooks';
import i18n from 'meteor/universe:i18n';
import Button from 'antd/lib/button';
import modal from 'antd/lib/modal';
import message from 'antd/lib/message';

import { {{ camelCase pluralName }} as {{ camelCase pluralName }}Query } from '../queries/{{ pascalCase pluralName }}.gql';
import { remove{{ pascalCase singularName }} as remove{{ pascalCase singularName }}Mutation } from '../mutations/{{ pascalCase pluralName }}.gql';

function Remove{{ pascalCase singularName }}Button({ {{#compare primaryFieldKey '!==' labelKeyKey}}{{ primaryFieldKey }}, {{ labelKeyKey }}{{else}}{{ primaryFieldKey }}{{/compare}}, ...props }) {
  const history = useHistory();
  const [remove{{ pascalCase singularName }}] = useMutation(remove{{ pascalCase singularName }}Mutation, {
    ignoreResults: true,
    onCompleted: () => {
      message.success(i18n.__('{{ pascalCase pluralName }}.{{ snakeCase shortSingularName }}_saved'));
      history.push('{{ uiRouteBasePath }}');
    },
    onError: (error) => {
      message.error(error.message);
    },
    refetchQueries: [{ query: {{ camelCase pluralName }}Query }],
    variables: { {{ primaryFieldKey }} },
  });

  function showConfirmModal() {
    modal.confirm({
      title: i18n.___('{{ pascalCase pluralName }}.confirm_remove_{{ snakeCase shortSingularName }}', { {{#compare labelKeyKey '!==' 'name'}}name: {{/compare}}{{ labelKeyKey }}{{#if labelKey.dataIndex}}.{{labelKey.dataIndex}}{{/if}} }),
      onOk: remove{{ pascalCase singularName }},
      okText: i18n.__('{{ pascalCase pluralName }}.remove'),
      okType: 'danger',
      cancelText: i18n.__('{{ pascalCase pluralName }}.cancel'),
    });
  }

  return (
    <Button
      key={ {{~ primaryFieldKey ~}} }
      type="danger"
      onClick={showConfirmModal}
      {...props}
    >
      {i18n.__('{{ pascalCase pluralName }}.remove_{{ snakeCase shortSingularName }}')}
    </Button>
  );
}

Remove{{ pascalCase singularName }}Button.propTypes = {
  {{ primaryFieldKey }}: PropTypes.string.isRequired,
  {{ labelKeyKey }}: PropTypes.string.isRequired,
};

export default Remove{{ pascalCase singularName }}Button;
