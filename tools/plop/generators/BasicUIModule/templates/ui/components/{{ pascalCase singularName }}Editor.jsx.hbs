
{{#*inline "fieldInput" }}
{{#compare this.type '&&' this.input}}
  {{#compare this.type 'in' 'Object|[String]|[Int]|[Number]' '&&' this.input '!in' 'CrossReferenceSelect|CrossReferenceSearch|Select|Checkboxes'}}
<ListField name="{{name }}">
  <ListItemField name="$" />
</ListField>
  {{else}}
<{{ pascalCase this.input }}Field name="{{name }}" />
  {{/compare}}
{{/compare}}
{{/inline~}}

/* eslint-disable max-len, no-return-assign */

import React from 'react';
import PropTypes from 'prop-types';
import { useMutation } from '@apollo/react-hooks';
import i18n from 'meteor/universe:i18n';
import Button from 'antd/lib/button';
import message from 'antd/lib/message';
import AutoForm from 'uniforms/AutoForm';
{{#if hasFieldPermissions }}
import hasRole from '{{uiPathOffset}}../../../modules/hasRole';
{{/if}}
{{#each fieldImports}}
import {{this.variable}} from '{{this.path}}';
{{/each}}

/* #### PLOP_IMPORTS_START #### */
/* #### PLOP_IMPORTS_END #### */

import { {{ camelCase pluralName }} as {{ camelCase name}}Query } from '../queries/{{ pascalCase pluralName }}.gql';
import { save{{ pascalCase singularName }} as save{{ pascalCase singularName }}Mutation } from '../mutations/{{ pascalCase pluralName }}.gql';

import {{ pascalCase singularName }}Schema from '{{uiPathOffset}}../../../api/{{ apiFolderName }}/schemas/{{ dashCase singularName }}';

import Styled{{ pascalCase singularName }}Editor from './Styled{{ pascalCase singularName }}Editor';

const {{ pascalCase singularName }}Editor = ({ doc, history{{#if hasFieldPermissions}}, roles{{/if}} }) => {
  const [save{{ pascalCase singularName }}] = useMutation(save{{ pascalCase singularName }}Mutation, {
    ignoreResults: true,
    onCompleted: () => {
      message.success(i18n.__('{{ pascalCase pluralName }}.{{ snakeCase shortSingularName }}_saved'));
      history.push('/{{ uiFolderName }}');
    },
    onError: (error) => {
      message.error(error.message);
    },
    refetchQueries: [{ query: {{ camelCase pluralName }}Query }],
  });

  function handleSubmit(form) {
    const cleanForm = {{ pascalCase singularName }}Schema.clean(form);
    // console.log('cleanForm', cleanForm);
    save{{ pascalCase singularName }}({
      variables: { {{ camelCase singularName }}: cleanForm },
    });
  }

  // fix issue with uniforms getting a null for visionNames
  if (doc && !doc.visionNames) {
    doc.visionNames = []; //eslint-disable-line
  }

  return (
    <Styled{{ pascalCase singularName }}Editor>
      <AutoForm
        name="{{ camelCase singularName }}"
        schema={ {{~ pascalCase singularName }}Schema}
        onSubmit={handleSubmit}
        model={doc}
        showInlineError
        placeholder
      >
{{#each schema.fields ~}}
  {{#compare this.permissions.create '||' this.permissions.update}}
  { hasRole(roles, 
    {{~#compare this.permissions.create 'arrayIsEqual' this.permissions.update ~}}
      [{{#each this.permissions.create }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]) && (
    {{~else~}}
       doc.{{@root.primaryFieldKey}} ? [{{#each this.permissions.update }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]:[{{#each this.permissions.create }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]) && (
    {{/compare}}
  {{/compare}}
  {{#compare this.input 'typeof' 'object'}}
      {{> fieldInput this.input}}
  {{else}}
      {{> fieldInput name=@key}}
  {{/compare}}
  {{#compare this.permissions.create '||' this.permissions.update}}
  )}
  {{/compare}}
{{~/each}}
        <Button htmlType="submit" type="primary" block>
          {i18n.__('{{ pascalCase pluralName }}.save')}
        </Button>
      </AutoForm>
    </Styled{{ pascalCase singularName }}Editor>
  );
};

{{ pascalCase singularName }}Editor.defaultProps = {
  doc: {},
};

{{ pascalCase singularName }}Editor.propTypes = {
  doc: PropTypes.object,
  history: PropTypes.object.isRequired,
{{#if hasFieldPermissions}}
  roles: PropTypes.array.isRequired,
{{/if}}
};

export default {{ pascalCase singularName }}Editor;
