{{#*inline "fieldInputs" }}
  {{#each this ~}}
    {{#compare this.permissions.create '||' this.permissions.update}}
{ hasRole(roles, 
      {{~#compare this.permissions.create 'arrayIsEqual' this.permissions.update ~}}
  [{{#each this.permissions.create }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]) && (
      {{~else~}}
  doc.{{@root.primaryFieldKey}} ? [{{#each this.permissions.update }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]:[{{#each this.permissions.create }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]) && (
      {{/compare}}
    {{/compare}}
    {{#if this.type}}
      {{#compare this.input 'typeof' 'object'}}
{{> fieldInput this.input keyPrefix=../keyPrefix}}
      {{else}}
{{> fieldInput name=@key keyPrefix=../keyPrefix}}
      {{/compare}}
    {{/if}}
    {{#compare this.permissions.create '||' this.permissions.update}}
)}
    {{/compare}}
  {{~/each}}
{{/inline}}
{{#*inline "fieldInput" }}
{{#compare this.input '||' this.fields}}
  {{#compare this.type 'startsWith' '[' '&&' this.input '!in' 'CrossReferenceSelect|CrossReferenceSearch|Select|Checkboxes'}}
<ListField name="{{keyPrefix}}{{name }}">
    {{#if this.fields}}
  {{> fieldInputs this.fields keyPrefix=(concat '$.')}}
    {{else}}
  <ListItemField name="$" />
    {{/if}}
</ListField>
  {{else}}
    {{#compare (stripBrackets this.type) 'in' 'Object' '&&' this.fields 'typeof' 'object'}}
<fieldset>
  <legend>{i18n.__('{{pascalCase @root.pluralName}}.{{name}}')}:</legend>
  {{> fieldInputs this.fields keyPrefix=(concat name '.')}}
</fieldset>
    {{else}}
<{{ pascalCase this.input }}Field name="{{keyPrefix}}{{name}}" />
    {{/compare}}
  {{/compare}}
{{/compare}}
{{/inline~}}

/* eslint-disable max-len, no-return-assign */

import React from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useMutation } from '@apollo/react-hooks';
{{#uniqueImports}}
import { useHistory } from 'react-router-dom';
import Button from 'antd/lib/button';
import message from 'antd/lib/message';
import AutoForm from 'uniforms/AutoForm';
import prepareFormModel from '{{uiPathOffset}}../../../modules/prepareFormModel';
  {{#if hasFieldPermissions }}
import hasRole from '{{uiPathOffset}}../../../modules/hasRole';
  {{/if}}
  {{#each fieldImports}}
import {{this.variable}} from '{{this.path}}';
  {{/each}}
{{/uniqueImports}}

/* #### PLOP_IMPORTS_START #### */
/* #### PLOP_IMPORTS_END #### */

import { {{ camelCase pluralName }} as {{ camelCase name}}Query } from '../queries/{{ pascalCase pluralName }}.gql';
import { save{{ pascalCase singularName }} as save{{ pascalCase singularName }}Mutation } from '../mutations/{{ pascalCase pluralName }}.gql';

import {{ pascalCase singularName }}Schema from '{{uiPathOffset}}../../../api/{{ apiFolderName }}/schemas/{{ dashCase singularName }}';

import Styled{{ pascalCase singularName }}Editor from './Styled{{ pascalCase singularName }}Editor';

function {{ pascalCase singularName }}Editor({{#prettyProps}} 
  doc,
  {{#if hasFieldPermissions}}roles,{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
  {{> (lookup . 'filterTemplateFile' ) template='ui/paramVariables'}}
  {{/if}}
{{/each}}
  {{/prettyProps}}) {
  const history = useHistory();

  const [save{{ pascalCase singularName }}] = useMutation(save{{ pascalCase singularName }}Mutation, {
    ignoreResults: true,
    onCompleted: () => {
      message.success(i18n.__('{{ pascalCase pluralName }}.{{ snakeCase shortSingularName }}_saved'));
      history.push({{#quoteString}}{{convertParamsToTemplateVars uiRouteBasePath }}{{/quoteString}});
    },
    onError: (error) => {
      message.error(error.message);
    },
    refetchQueries: [{ query: {{ camelCase pluralName }}Query }],
  });

  function handleSubmit(form) {
    const cleanForm = {{ pascalCase singularName }}Schema.clean(form);
    // console.log('cleanForm', cleanForm);
    save{{ pascalCase singularName }}({
      variables: { {{ camelCase singularName }}: cleanForm },
    });
  }

  // fix issue with uniforms getting a null for visionNames
  if (doc && !doc.visionNames) {
    doc.visionNames = []; //eslint-disable-line
  }

  return (
    <Styled{{ pascalCase singularName }}Editor>
      <AutoForm
        name="{{ camelCase singularName }}"
        schema={ {{~ pascalCase singularName }}Schema}
        onSubmit={handleSubmit}
        model={prepareFormModel(doc)}
        showInlineError
        placeholder
      >
        {{> fieldInputs schema.fields }}
        <Button htmlType="submit" type="primary" block>
          {i18n.__('{{ pascalCase pluralName }}.save')}
        </Button>
      </AutoForm>
    </Styled{{ pascalCase singularName }}Editor>
  );
}

{{ pascalCase singularName }}Editor.defaultProps = {
  doc: {},
};

{{ pascalCase singularName }}Editor.propTypes = {
  doc: PropTypes.object,
{{#if hasFieldPermissions}}
  roles: PropTypes.array.isRequired,
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
  {{> (lookup . 'filterTemplateFile' ) template='ui/paramPropTypes'}}
  {{/if}}
{{/each}}
};

export default {{ pascalCase singularName }}Editor;
