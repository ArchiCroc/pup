{{#*inline "fieldName" ~}}
{{#if this.input.name}}{{camelCase this.input.name}}{{else}}{{ @key }}{{/if}}
{{~/inline~}}
{{#*inline "pascalFieldName" ~}}
{{#if this.input.name}}{{pascalCase this.input.name}}{{else}}{{pascalCase @key}}{{/if}}
{{~/inline~}}
{{#*inline "filterableFieldHook" ~}}
  {{#compare (stripBrackets this.type) '===' 'Int' }}
const [current{{ pascalCase name }}, setCurrent{{ pascalCase name }}] = useState(
  {{ name }} && isString({{ name }}) ? [parseInt({{ name }}, 10)] : {{ name }} && {{ name }}.map(parseInt),
);
  {{/compare}}
  {{#compare (stripBrackets this.type) 'in' 'Float|Number' }}
const [current{{ pascalCase name }}, setCurrent{{ pascalCase name }}] = useState(
  {{ name }} && isString({{ name }}) ? [parseFloat({{ name }}, 10)] : {{ name }} && {{ name }}.map(parseFloat),
);
  {{/compare}}
  {{#compare (stripBrackets this.type) 'in' 'String|ObjectID' }}
const [current{{ pascalCase name }}, setCurrent{{ pascalCase name }}] = useState(
  {{ name }} && isString({{ name }}) ? [{{ name }}] : {{ name }},
);
  {{/compare}}
  {{#compare this.type '===' 'Boolean' }}
const [current{{ pascalCase name }}, setCurrent{{ pascalCase name }}] = useState(
  {{ name }} && isString({{ name }}) ? !!({{ name }}.toLowerCase() === 'true') : {{ name }},
);
  {{/compare}}
{{~/inline~}}

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery } from '@apollo/react-hooks';
import queryString from 'query-string';
{{#if isFilterable}}
import isString from 'lodash/isString';
{{/if}}
import Table from 'antd/lib/table';
{{#if isSearchable}}
import Input from 'antd/lib/input';
{{/if}}
import PageHeader from '{{uiPathOffset}}../components/PageHeader';
import PrettyDate from '{{uiPathOffset}}../components/PrettyDate';
import New{{ pascalCase singularName }}Button from './components/New{{ pascalCase singularName }}Button';
{{#if schema.permissions.create}}
import hasRole from '{{uiPathOffset}}../../modules/hasRole';
{{/if}}
{{#if hasGraphqlFilterable}}
import useQueryForFilters from '{{uiPathOffset}}../../modules/hooks/useQueryForFilters';
{{/if}}

import Styled{{ pascalCase pluralName }} from './Styled{{ pascalCase pluralName }}';

import { {{ camelCase pluralName }} as {{ camelCase pluralName }}Query } from './queries/{{ pascalCase pluralName }}.gql';
{{#if isSearchable}}
const { Search } = Input;
{{/if}}

{{!-- if a filterable field has choices create a function to generate the correct object for antd Table  --}}
{{#each schema.fields}}
  {{#compare this.filterable '&&' this.choices}}
function get{{pascalCase @key}}Filters() {
  const choices = [{{#each this.choices}}{{quoteIfString this}}{{#unless @last}}, {{/unless}}{{/each}}];
  const filters = [];
  for (const choice of choices) {
    filters.push({ text: i18n.__(`{{ pascalCase @root.pluralName }}.{{snakeCase @key}}_${choice}`), value: choice },)
  }
  return filters;
}
  {{/compare}}
{{/each}}

const {{ pascalCase pluralName }} = ({ history, location, roles }) => {
  const {
    pageSize = 10,
    page = 1,
    sort = '{{#if schema.defaultSortField}}{{schema.defaultSortField}}{{else}}{{labelKeyKey}}{{/if}}',
    order = '{{#if schema.defaultSortOrder}}{{schema.defaultSortOrder}}{{else}}ascend{{/if}}',
{{#if isSearchable}}
    search = null,
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
    {{> fieldName }},
  {{/if}}
{{/each}}
  } = queryString.parse(location.search, { arrayFormat: 'comma' });

  const paginationObject = {
    pageSize,
    //  onChange: this.onPageChange,
  };

  const [currentPage, setCurrentPage] = useState(parseInt(page, 10));
  const [currentSort, setCurrentSort] = useState(sort);
  const [currentOrder, setCurrentOrder] = useState(order);
{{#if isSearchable}}
  const [currentSearch, setCurrentSearch] = useState(search);
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
    {{#compare this.input 'typeof' 'object'}}
  {{> filterableFieldHook this.input}}
    {{else}}
  {{> filterableFieldHook name=@key}}
    {{/compare}}
  {{/if}}
{{/each}}

  const { loading, data: { {{ camelCase pluralName }} } = {} } = useQuery({{ camelCase pluralName }}Query, {
    fetchPolicy: 'cache-and-network',
    variables: {
      pageSize: paginationObject.pageSize,
      page: currentPage,
      sort: currentSort,
      order: currentOrder,
{{#if isSearchable}}
      search: currentSearch,
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
      {{> fieldName }}: current{{> pascalFieldName}},
  {{/if}}
{{/each}}
    },
  });
{{#each schema.fields}}
  {{#compare this.filterable '&&' this.reference}}
  const { filters: {{camelCase @key}}Filters } = useQueryForFilters({
    query: '{{this.reference.query}}',
    {{#if this.reference.edges}}
    edges: '{{this.reference.edges}}',
    {{/if}}
    labelKey: '{{this.reference.labelKey}}',
    valueKey: '{{this.reference.valueKey}}',
  });
  {{/compare}}
{{/each}}
  const columns = [
{{#each schema.fields ~}}
  {{#compare this.input '!==' 'Hidden' '&&' this.showInTableView '!==' false}}
    {{~#compare this.input '||' this.showInTableView }}
    {
      title: i18n.__(' {{~ pascalCase @root.name ~}} .{{ snakeCase @key }}'),
      dataIndex: '{{ @key }}{{#if this.dataIndex}}{{#compare this.type '!startsWith' '['}}.{{ this.dataIndex }}{{/compare}}{{/if}}',
      {{#compare this.type '===' 'String'}}
        {{#compare this.choices '!typeof' 'object'}}
      sorter: true,
      defaultSortOrder: 'ascend',
      // render: (value, record) => <Link to={`/{{ dashCase @root.name }}/${record.{{ @root.urlFieldKey ~}} }/edit`}>{value}</Link>, // eslint-disable-line
        {{/compare}}
      {{/compare}}
      {{#compare this.type 'in' 'Date|DateTime|Time'}}
      sorter: true,
      defaultSortOrder: 'descend',
      render: ({{ @key }}) => <PrettyDate timestamp={ {{~ @key ~}} } />, // eslint-disable-line 
      {{/compare}}
      {{#compare this.type '===' 'Boolean'}}
      sorter: true,
      // defaultSortOrder: 'ascend',
      render: (value, record, index) => i18n.__(`{{ pascalCase @root.name }}.${value ? 'yes' : 'no'}`),
      {{/compare}}
      {{#compare this.type 'in' 'Number|Float'}}
      sorter: true,
      // defaultSortOrder: 'ascend',
      // render: (value, record) => value, // eslint-disable-line
      {{/compare}}
      {{#compare this.choices 'typeof' 'object'  }}
      sorter: true,
      // defaultSortOrder: 'ascend',
      render: (value, record) => i18n.__(`{{ pascalCase @root.name }}.{{@key}}_${value}`), // eslint-disable-line
      {{/compare}}
      {{#compare this.type 'startsWith' '['}}
      sorter: true,
      render: (value) => value && value{{#if this.dataIndex}}.map((item) => item && item.{{ this.dataIndex }}){{/if}}
      {{~#compare this.type '===' '[String]'}}.map((item) => i18n.__(`{{ pascalCase @root.name }}.{{@key}}_${item}`)){{/compare}}.join(', '),
      {{/compare}}
      {{#compare this.filterable '&&' this.choices}}
      filteredValue: current{{> pascalFieldName }},
      filters: get{{> pascalFieldName }}Filters(),
      {{/compare}}
      {{#compare this.filterable '&&' this.reference}}
      filteredValue: current{{> pascalFieldName }},
      filters: {{camelCase @key}}Filters,
      {{/compare}}
    },
    {{/compare}}
  {{/compare}}
{{/each}}
  ];

  // complete paginationObject
  if ({{ camelCase pluralName }} && {{ camelCase pluralName }}.{{ camelCase pluralName }}) {
    paginationObject.total = {{ camelCase pluralName }}.total;
    paginationObject.current = currentPage;
  }
{{#if isSearchable}}
  function handleSearch(value) {
    setCurrentSearch(value);
    history.push({
      pathname: window.location.pathname,
      search: `?${queryString.stringify(
        {
          page: currentPage,
          sort: currentSort,
          order: currentOrder,
      {{#if isSearchable}}
          search: value,
      {{/if}}
      {{#each schema.fields}}
        {{#if this.filterable}}
          {{> fieldName }}: current{{> pascalFieldName }},
        {{/if}}
      {{/each}}  
        },
        { arrayFormat: 'comma' },
      )}`,
    });
  }
{{/if}}

  function handleTableChange(pagination, filters, sorter) {
{{#if isFilterable}}
    const {
  {{#each schema.fields}}
    {{#if this.filterable}}
      {{#if this.dataIndex}}'{{@key}}.{{this.dataIndex}}'{{else}}{{> fieldName }}{{/if}}: new{{> pascalFieldName }} = null,
    {{/if}}
  {{/each}}  
    } = filters;
{{/if}}

    const currentField = sorter.field ? sorter.field.split('.')[0] : 'createdAtUTC';

    setCurrentPage(pagination.current);
    setCurrentOrder(sorter.order);
    setCurrentSort(sorter.field);
{{#each schema.fields}}
  {{#if this.filterable}}
    setCurrent{{> pascalFieldName }}(new{{> pascalFieldName }});
  {{/if}}
{{/each}}  

    history.push({
      pathname: window.location.pathname,
      search: `?${queryString.stringify(
        {
          page: pagination.current,
          sort: currentField,
          order: sorter.order,
      {{#if isSearchable}}
          search: currentSearch,
      {{/if}}
      {{#each schema.fields}}
        {{#if this.filterable}}
          {{> fieldName }}: new{{> pascalFieldName }},
        {{/if}}
      {{/each}}  
        },
        { arrayFormat: 'comma' },
      )}`,
    });
  }

  function handleTableRow(record) {
    return {
      onClick: () => {
        history.push(`/{{ uiFolderName }}/${record.{{ urlFieldKey ~}} }`);
      },
    };
  };

  return (
    <Styled{{ pascalCase pluralName }}>
      <PageHeader title={i18n.__('{{ pascalCase pluralName }}.{{ snakeCase shortSingularName }}_plural')} />
      <p>
        {{#if schema.permissions.create}}{ hasRole(roles, [{{#each schema.permissions.create }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]) && ({{/if}}<New{{ pascalCase singularName }}Button />{{#if schema.permissions.create}})}{{/if}}
        {{#if isSearchable}}
        <span className="pull-right" style=\{{ width: 300 }}>
          <Search
            placeholder={i18n.__('{{ pascalCase pluralName }}.search_placeholder')}
            onSearch={handleSearch}
            defaultValue={currentSearch}
            allowClear
            enterButton
          />
        </span>
        {{/if}}
      </p>
      <Table
        columns={columns}
        dataSource={ {{~ camelCase pluralName }} && {{ camelCase pluralName }}.{{ camelCase pluralName ~}} }
        loading={loading}
        onChange={handleTableChange}
        onRow={handleTableRow}
        rowKey="{{ primaryFieldKey }}"
        pagination={paginationObject}
        rowClassName="clickable"
      />
    </Styled{{ pascalCase pluralName }}>
  );
};

{{ pascalCase pluralName }}.propTypes = {
  history: PropTypes.object.isRequired,
  location: PropTypes.object.isRequired,
  roles: PropTypes.array.isRequired,
};

export default {{ pascalCase pluralName }};
