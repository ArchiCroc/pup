import {{ pascalCase pluralName }} from './{{ pascalCase pluralName }}';
import {{ pascalCase singularName }}Schema from './schemas/{{ dashCase singularName }}';
// import sanitizeHtml from 'sanitize-html';
import checkUserRole from '{{apiPathOffset}}../Users/actions/checkUserRole';
import createMongoModifier from '{{apiPathOffset}}../../modules/server/createMongoModifier';

export default {
  save{{ pascalCase singularName }}: (root, args, { user }) => {
{{#compare schema.permissions.create 'arrayIsEqual' schema.permissions.update ~}}
  {{#if schema.permissions.create }}
    if (!user || !user._id || !checkUserRole(user._id, [{{#each schema.permissions.create }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}])) {
      throw new Error('Sorry, you must have permission to save a {{ titleCase singularName }}.');
    }

  {{/if}}
{{else}}
  {{#if schema.permissions.update}}
    if (args._id && !checkUserRole(user._id, [{{#each schema.permissions.update }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}])) {
      throw new Error('Sorry, you must have permission to update a {{ titleCase singularName }}.');
    }
  {{/if}}
  {{#if schema.permissions.create}}
    if (!args._id && !checkUserRole(user._id, [{{#each schema.permissions.create }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}])) {
      throw new Error('Sorry, you must have permission to create a {{ titleCase singularName }}.');
    }
  {{/if}}

{{/compare}}
    /* #### PLOP_MUTATION_REMOVE_VALIDATION_START #### */
    {{~schema.hooks.mutationValidation}}
    {{~schema.hooks.mutationSaveValidation}}
    /* #### PLOP_MUTATION_REMOVE_VALIDATION_END #### */

    const cleanDoc = {{ pascalCase singularName }}Schema.clean(args.{{ camelCase singularName }});
    {{ pascalCase singularName }}Schema.validate(cleanDoc);

    /* #### PLOP_MUTATION_PRE_SAVE_START #### */
    /* #### PLOP_MUTATION_PRE_SAVE_END #### */

    const userId = user._id;
    const timestamp = new Date();

    if (cleanDoc.{{ primaryFieldKey }}) {
      const { {{ primaryFieldKey }} } = cleanDoc;

      cleanDoc.updatedById = userId;
      cleanDoc.updatedAtUTC = timestamp;

      const currentDoc = {{ pascalCase pluralName }}.findOne(_id, { fields: { createdById: 0, createdAtUTC: 0 } });
      if (!currentDoc) {
        throw new Error('Cannot find {{ titleCase singularName }} to update');
      }

      const modifier = createMongoModifier(currentDoc, cleanDoc);

      delete modifier.$set._id;

{{#compare schema.collectionPermissionFilter.update 'includes' 'self' }}
      // schema.collectionPermissionFilter.update includes self
      if (!{{ pascalCase pluralName }}.findOne({ {{ primaryFieldKey }}: args.{{ primaryFieldKey }}, {{userKeyField}}: user._id })) {
        throw new Error('Sorry, you are not the user that is has permission to update this {{ titleCase singularName }}.');
      }

{{/compare}}
      /* #### PLOP_MUTATION_PRE_UPDATE_START #### */
      {{~schema.hooks.mutationPreUpdate}}
      /* #### PLOP_MUTATION_PRE_UPDATE_END #### */

      {{ pascalCase pluralName }}.update({ {{ primaryFieldKey }} }, modifier);
      return {{ pascalCase pluralName }}.findOne({{ primaryFieldKey }});
    }

    cleanDoc.createdById = userId;
    cleanDoc.createdAtUTC = timestamp;
    cleanDoc.updatedById = userId;
    cleanDoc.updatedAtUTC = timestamp;

    /* #### PLOP_MUTATION_PRE_INSERT_START #### */
    {{~schema.hooks.mutationPreInsert}}
    /* #### PLOP_MUTATION_PRE_INSERT_END #### */

    const {{ camelCase singularName }}Id = {{ pascalCase pluralName }}.insert(cleanDoc);
    const doc = {{ pascalCase pluralName }}.findOne({{ camelCase singularName }}Id);
    return doc;
  },
  remove{{ pascalCase singularName }}: (root, args, { user }) => {
{{#if schema.permissions.delete }}
    if (!user || !user._id || !checkUserRole(user._id, [{{#each schema.permissions.delete }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}])) {
      throw new Error('Sorry, you must have permission to remove {{ titleCase singularName }}.');
    }

{{/if}}
    /* #### PLOP_MUTATION_REMOVE_VALIDATION_START #### */
    {{~schema.hooks.mutationValidation}}
    {{~schema.hooks.mutationRemoveValidation}}
    /* #### PLOP_MUTATION_REMOVE_VALIDATION_END #### */

    /* #### PLOP_MUTATION_PRE_REMOVE_START #### */
    {{~schema.hooks.mutationPreRemove}}
    /* #### PLOP_MUTATION_PRE_REMOVE_END #### */

{{#compare schema.collectionPermissionFilter.delete 'includes' 'self' }}
    // schema.collectionPermissionFilter.delete includes self
    if (!{{ pascalCase pluralName }}.findOne({ {{ primaryFieldKey }}: args.{{ primaryFieldKey }}, {{userKeyField}}: user._id })) {
      throw new Error('Sorry, you are not the user that is has permission to remove this {{ titleCase singularName }}.');
    }
{{/compare}}
    {{ pascalCase pluralName }}.remove(args);
    return args;
  },
  /* #### PLOP_MUTATIONS_START #### */
  /* #### PLOP_MUTATIONS_END #### */
};
