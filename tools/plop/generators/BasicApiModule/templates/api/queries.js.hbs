{{#*inline "inputFieldName" ~}}
{{#if this.input.name}}{{this.input.name}}{{else}}{{ @key }}{{/if}}
{{~/inline}}
import isArray from 'lodash/isArray';
import {{ pascalCase pluralName }} from './{{ pascalCase pluralName }}';
import checkUserRole from '{{apiPathOffset}}../Users/actions/checkUserRole';

export default {
  {{ camelCase pluralName }}: (parent, args, { user }) => {
{{#if schema.permissions.read}}
    if (!user || !user._id || !checkUserRole(user._id, [{{#each schema.permissions.read }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}])) {
      throw new Error('Sorry, you must have permission to view {{ titleCase pluralName }}.');
    }

{{/if}}
    /* #### PLOP_QUERY_VALIDATION_START #### */
    {{~schema.hooks.queryValidation}}
    /* #### PLOP_QUERY_VALIDATION_END #### */

    const {
      _ids,
      pageSize = 10,
      page = 1,
      sort = '{{#if schema.defaultSortField}}{{schema.defaultSortField}}{{else}}{{labelKeyKey}}{{/if}}',
      order = '{{#if schema.defaultSortOrder}}{{schema.defaultSortOrder}}{{else}}ascend{{/if}}',
{{#if isSearchable}}
      search,
{{/if}}
{{#each schema.fields}}
  {{#compare this.filterable '||' this.queryable}}
      {{> inputFieldName ~}},
  {{/compare}}
{{/each}}
    } = args;

    const cleanPageSize = pageSize > 100 ? 100 : pageSize;

    const options = _ids
      ? {}
      : {
          limit: cleanPageSize,
          skip: page * cleanPageSize - cleanPageSize,
        };

    const orderDirection = order === 'descend' ? -1 : 1;
    options.sort = {};
    options.sort[sort] = orderDirection;

    const query = {};

{{#compare schema.collectionPermissionFilter.read 'includes' 'self' }}
    // schema.collectionPermissionFilter.read includes self
    query.{{userKeyField}} = user._id;

{{/compare}}
    if (_ids) {
      query._id = { $in: _ids };
    }

{{#each schema.fields}}
  {{#compare this.filterable '||' this.queryable}}
    if (isArray({{> inputFieldName ~}})) {
      query.{{> inputFieldName }} = { $in: {{> inputFieldName }} };
    } else if ({{> inputFieldName }}) {
      query.{{> inputFieldName }} = {{> inputFieldName }};
    }
  {{/compare}}
{{/each}}

{{#if isSearchable}}
    if (search) {
      const searchRegEx = new RegExp(search, 'i');
      query.$or = [
  {{#each schema.fields}}
    {{#compare this.searchable '||' this.labelKey}}
        { {{ @key }}: searchRegEx },
    {{/compare}}
  {{/each}}
      ];
    }
{{/if}}

    /* #### PLOP_QUERY_PRE_FIND_START #### */
    {{~schema.hooks.queryPreFind}}
    /* #### PLOP_QUERY_PRE_FIND_END #### */

    const result = {{ pascalCase pluralName }}.find(query, options);

    return {
      total: result.count(false),
      {{ camelCase pluralName }}: result.fetch(),
    };
  },
  my{{ pascalCase pluralName }}: (parent, args, { user }) => {
{{#if schema.permissions.read }}
    if (!user || !user._id || !checkUserRole(user._id, [{{#each schema.permissions.read }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}])) {
      throw new Error('Sorry, you must have permission to view my {{ titleCase pluralName }}.');
    }
{{/if}}
    /* #### PLOP_QUERY_VALIDATION_START #### */
    {{~schema.hooks.queryValidation}}
    /* #### PLOP_QUERY_VALIDATION_END #### */

    const query = { {{userKeyField}}: user._id };
    const options = {};

    /* #### PLOP_QUERY_PRE_FIND_START #### */
    {{~schema.hooks.queryPreFind}}
    /* #### PLOP_QUERY_PRE_FIND_END #### */

    return {{ pascalCase pluralName }}.find(query).fetch(query, options);
  },
  {{ camelCase singularName }}: (parent, args, { user }) => {
{{#if schema.permissions.read}}
    if (!user || !user._id || !checkUserRole(user._id, [{{#each schema.permissions.read }}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}])) {
      throw new Error('Sorry, you must have permission to view {{ titleCase singularName }}.');
    }

{{/if}}
    /* #### PLOP_QUERY_VALIDATION_START #### */
    {{~schema.hooks.queryValidation}}
    /* #### PLOP_QUERY_VALIDATION_END #### */

    const query = {};
    const options = {};

{{#compare schema.collectionPermissionFilter.read 'includes' 'self' }}
    // schema.collectionPermissionFilter.read includes self
    query.{{userKeyField}} = user._id;

{{/compare}}
    /* #### PLOP_QUERY_PRE_FIND_START #### */
    {{~schema.hooks.queryPreFind}}
    /* #### PLOP_QUERY_PRE_FIND_END #### */

    const {{ primaryFieldKey }} = (parent && parent.{{ camelCase singularName }}{{ pascalCase primaryFieldKey}}) || args.{{ primaryFieldKey }};
    if ({{ primaryFieldKey }}) {
      query.{{ primaryFieldKey }} = {{ primaryFieldKey }};
      return {{ pascalCase pluralName }}.findOne(query, options);
    }
{{#compare primaryFieldKey '!==' urlFieldKey }}
    const {{ urlFieldKey }} = (parent && parent.{{ camelCase singularName }}{{ pascalCase urlFieldKey }}) || args.{{ urlFieldKey }};
    if ({{ urlFieldKey }}) {
      query.{{ urlFieldKey }} = {{ urlFieldKey }}
      return {{ pascalCase pluralName }}.findOne(query);
    }
{{/compare}}
    return null;
  },
  /* #### PLOP_QUERIES_START #### */
  /* #### PLOP_QUERIES_END #### */
};
