import isArray from 'lodash/isArray';
import {{ pascalCase pluralName }} from './{{ pascalCase pluralName }}';
import checkUserRole from '{{apiPathOffset}}../Users/actions/checkUserRole';

export default {
  {{ camelCase pluralName }}: (parent, args, context) => {
    {{#compare schema.permissions.read '!==' 'everyone' }}
    if (!context.user || !context.user._id || !checkUserRole(context.user._id, '{{schema.permissions.read}}')) {
      throw new Error('Sorry, you must have permission to view {{ pascalCase pluralName }}.');
    }
    {{/compare}}

    const {
      _ids,
      pageSize = 10,
      page = 1,
      sort = '{{#if schema.defaultSortField}}{{schema.defaultSortField}}{{else}}{{labelKeyField}}{{/if}}',
      order = '{{#if schema.defaultSortOrder}}{{schema.defaultSortOrder}}{{else}}ascend{{/if}}',
  {{#if isSearchable}}
      search,
  {{/if}}
  {{#each schema.fields}}
    {{#if this.filterable}}
      {{ @key }},
    {{/if}}
  {{/each}}
    } = args;

    const cleanPageSize = pageSize > 100 ? 100 : pageSize;

    const options = _ids
      ? {}
      : {
          limit: cleanPageSize,
          skip: page * cleanPageSize - cleanPageSize,
        };

    const orderDirection = order === 'descend' ? -1 : 1;
    options.sort = {};
    options.sort[sort] = orderDirection;

    const query = {};

    if (_ids) {
      query._id = { $in: _ids };
    }

{{#each schema.fields}}
  {{#if this.filterable}}
    if (isArray({{ @key }})) {
      query.{{ @key }} = { $in: {{ @key }} };
    }
  {{/if}}
{{/each}}

{{#if isSearchable}}
    if (search) {
      const searchRegEx = new RegExp(search, 'i');
      query.$or = [
  {{#each schema.fields}}
    {{#compare this.searchable '||' this.labelKey}}
        { {{ @key }}: searchRegEx },
    {{/compare}}
  {{/each}}
      ];
    }
{{/if}}

    const result = {{ pascalCase pluralName }}.find(query, options);

    return {
      total: result.count(false),
      {{ camelCase pluralName }}: result.fetch(),
    };
  },
  my{{ pascalCase pluralName }}: (parent, args, context) => {
{{#compare schema.permissions.read '!==' 'everyone' }}
    if (!context.user || !context.user._id || !checkUserRole(context.user._id, '{{schema.permissions.read}}')) {
      throw new Error('Sorry, you must have permission to view my {{ pascalCase pluralName }}.');
    }
{{/compare}}
    return {{ pascalCase pluralName }}.find({ {{userKeyField}}: context.user._id }).fetch();
  },
  {{ camelCase singularName }}: (parent, args, context) => {
{{#compare schema.permissions.read '!==' 'everyone' }}
    if (!context.user || !context.user._id || !checkUserRole(context.user._id, '{{schema.permissions.read}}')) {
      throw new Error('Sorry, you must have permission to view {{ pascalCase singularName }}.');
    }
{{/compare}}

    const {{ primaryKeyField }} = (parent && parent.{{ camelCase singularName }}{{ pascalCase primaryKeyField}}) || args.{{ primaryKeyField }};
    if ({{ primaryKeyField }}) {
      return {{ pascalCase pluralName }}.findOne({ {{ primaryKeyField }} });
    }
{{#compare primaryKeyField '!==' urlKeyField }}
    const {{ urlKeyField }} = (parent && parent.{{ camelCase singularName }}{{ pascalCase urlKeyField }}) || args.{{ urlKeyField }};
    if ({{ urlKeyField }}) {
      return {{ pascalCase pluralName }}.findOne({ {{ urlKeyField }} });
    }
{{/compare}}


    return null;
  }
  /* #### PLOP_QUERIES_START #### */
  /* #### PLOP_QUERIES_END #### */
};
