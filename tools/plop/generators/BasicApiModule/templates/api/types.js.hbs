{{#*inline "schemaFieldType"}}
{{#compare this.type '===' '[Object]'}}
{{name}}: [{{ pascalCase @root.singularName }}{{ pascalCase name }}]
{{else}}
{{name}}: {{#compare this.type '===' 'Object'}}{{ pascalCase @root.singularName }}{{ pascalCase name }}{{else}}{{ cleanGraphqlType type}}{{/compare}}
{{/compare}}
{{/inline}}
{{#*inline "schemaFieldInput"}}
  {{#compare this.input '||' this.fields}}
    {{#compare this.type '===' '[Object]'}}
{{name}}: [{{ pascalCase @root.singularName }}{{ pascalCase name }}Input]
    {{~else~}}
{{name}}: {{#compare this.type '===' 'Object'}}{{ pascalCase @root.singularName }}{{ pascalCase name }}Input{{else}}{{cleanGraphqlType this.type}}{{/compare~}}
    {{~/compare ~}}
{{~#compare this.validate.optional '==' undefined '||' this.validate.optional '==' false}}{{#compare this.defaultValue '==' undefined}}!{{/compare}}{{/compare}}
  {{/compare}}
{{/inline ~}}

export default `
{{#each schema.fields ~}}
{{#compare (stripBrackets this.type) '===' 'Object'}}
{{#if this.fields}}
type {{ pascalCase @root.singularName }}{{ pascalCase @key }} {
  {{#each this.fields ~}}
    {{#if this.type}}
      {{#compare this.input 'typeof' 'object'}}
  {{> schemaFieldType this.input }}
      {{/compare}}
  {{> schemaFieldType name=@key}}
    {{/if}}
  {{/each}}
}
{{/if}}
{{/compare}}
{{~/each}}

type {{ pascalCase singularName }} {
{{#each schema.fields ~}}
  {{~#if this.type}}
    {{#compare this.input 'typeof' 'object'}}
  {{> schemaFieldType this.input }}
    {{/compare}}
  {{> schemaFieldType name=@key}}
  {{/if~}}
{{~/each}}
}

type {{ pascalCase pluralName }} {
  total: Int
{{#each schema.fields}}
  {{#if this.groupKey}}
  {{@key}}: {{this.type}} 
  {{/if}}
{{/each}}
  {{ camelCase pluralName }}: [{{ pascalCase singularName }}]
}

{{#each schema.fields ~}}
{{#compare (stripBrackets this.type) '===' 'Object'}}{{!-- this may need to be extended to subtypes too --}}
{{#if this.fields}}
input {{ pascalCase @root.singularName }}{{ pascalCase @key }}Input {
  {{#each this.fields ~}}
    {{~#compare this.type '&&' this.input}}
      {{#compare this.input 'typeof' 'object'}}
  {{> schemaFieldInput this.input }}
      {{else}}
  {{> schemaFieldInput name=@key}}
      {{/compare}}
    {{/compare~}}
  {{/each}}
}
{{/if}}
{{/compare}}
{{~/each}}

input {{ pascalCase singularName }}Input {
{{#each schema.fields }}
  {{~#compare this.type '&&' this.input '||' this.type '&&' this.fields}}
    {{#compare this.input 'typeof' 'object' }}
  {{> schemaFieldInput this.input }}
    {{else}}
  {{> schemaFieldInput name=@key}}
    {{/compare}}
  {{/compare~}}
{{/each~}}
}
`;
