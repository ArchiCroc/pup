{{#*inline "schemaFieldType"}}
{{#compare this.type '===' '[Object]'}}
{{name}}: [{{ pascalCase @root.singularName }}{{ pascalCase name }}]
{{else}}
{{name}}: {{#compare this.type '===' 'Object'}}{{ pascalCase @root.singularName }}{{ pascalCase name }}{{else}}{{ cleanGraphqlType type}}{{/compare}}
{{/compare}}
{{/inline}}
{{#*inline "schemaFieldInput"}}
  {{#compare this.input '||' this.fields}}
    {{#compare this.type '===' '[Object]'}}
{{name}}: [{{ pascalCase @root.singularName }}{{ pascalCase name }}Input]
    {{~else~}}
{{name}}: {{#compare this.type '===' 'Object'}}{{ pascalCase @root.singularName }}{{ pascalCase name }}Input{{else}}{{cleanGraphqlType this.type}}{{/compare~}}
    {{~/compare ~}}
{{~#compare this.validate.optional '==' undefined '||' this.validate.optional '==' false}}{{#compare this.defaultValue '==' undefined}}!{{/compare}}{{/compare}}
  {{/compare}}
{{/inline ~}}
{{#*inline "typeFilterWrapper"}}
  {{#ifPartialHasValue @partial-block}}
type {{ pascalCase pluralName }}Filters {
  {{> @partial-block}}
}

  {{/ifPartialHasValue}}
{{/inline}}
{{#*inline "multiItemFilterField"}}
  {{#ifPartialHasValue @partial-block}}
  filters: {{ pascalCase pluralName }}Filters
  {{/ifPartialHasValue}}
{{/inline}}
export default `
{{#each schema.fields ~}}
  {{#compare (stripBrackets this.type) '===' 'Object'}}
    {{#if this.fields}}
type {{ pascalCase @root.singularName }}{{ pascalCase @key }} {
      {{#each this.fields ~}}
        {{#if this.type}}
          {{#compare this.input 'typeof' 'object' '&&' @key '!==' this.input.name}}
  {{> schemaFieldType this.input }}
          {{/compare}}
  {{> schemaFieldType name=@key}}
        {{/if}}
      {{/each}}
}

    {{/if}}
  {{/compare}}
{{~/each}}
type {{ pascalCase singularName }} {
{{#each schema.fields ~}}
  {{~#if this.type}}
    {{#compare this.input 'typeof' 'object' '&&' @key '!==' this.input.name}}
  {{> schemaFieldType this.input }}
    {{/compare}}
  {{> schemaFieldType name=@key}}
  {{/if~}}
{{~/each}}
}

{{#if this.isFilterable}}
{{#> typeFilterWrapper}}
  {{#each schema.fields}}
    {{#if this.filterable}}
  {{> (lookup . 'filterTemplateFile' ) template='api/typeFilterFields'}}
    {{/if}}
  {{/each}}
{{/typeFilterWrapper}}
{{/if}}
type {{ pascalCase pluralName }} {
  total: Int
{{#if this.isFilterable}}
  {{#> multiItemFilterField}}
  {{!--this is just to see if we have sub fields and need to add this field--}}
  {{#each schema.fields}}
    {{#if this.filterable}}
  {{> (lookup . 'filterTemplateFile' ) template='api/typeFilterFields'}}
    {{/if}}
  {{/each}}
  {{/ multiItemFilterField}}
{{/if}}
{{!--{{#each schema.fields}}
  {{#if this.groupKey}}
  {{@key}}: {{this.type}} 
  {{/if}}
{{/each}}--}}
  {{ camelCase pluralName }}: [{{ pascalCase singularName }}]
}

{{#each schema.fields ~}}
   {{#compare (stripBrackets this.type) '===' 'Object'}}{{!-- this may need to be extended to subtypes too --}}
      {{#if this.fields}}
input {{ pascalCase @root.singularName }}{{ pascalCase @key }}Input {
      {{#each this.fields ~}}
        {{~#compare this.type '&&' this.input}}
  {{> schemaFieldInput this.input }}
        {{/compare~}}
      {{/each}}
}

    {{/if}}
  {{/compare}}
{{~/each}}
input {{ pascalCase singularName }}Input {
{{#each schema.fields }}
  {{~#compare this.type '&&' this.input '||' this.type '&&' this.fields}}
  {{> schemaFieldInput this.input }}
  {{/compare~}}
{{/each~}}
}
`;
