import isArray from 'lodash/isArray';
import {{ pascalCase name }} from './{{ pascalCase name }}';
import checkUserRole from '../Users/actions/checkUserRole';

export default {
  {{ camelCase name }}: (parent, args, context) => {
    {{#compare schema.permissions.read '!==' 'everyone' }}
    if (!context.user || !context.user._id || !checkUserRole(context.user._id, '{{schema.permissions.read}}')) {
      throw new Error('Sorry, you must have permission to view {{ pascalCase name }}.');
    }
    {{/compare}}

    const {
      search,
      pageSize = 10,
      page = 1,
      sort = '{{#if schema.defaultSortField}}{{schema.defaultSortField}}{{else}}{{labelKeyField}}{{/if}}',
      order = '{{#if schema.defaultSortOrder}}{{schema.defaultSortOrder}}{{else}}ascend{{/if}}',
      {{#each schema.fields}}
      {{#if this.filterable}}
      {{ @key }},
      {{/if}}
      {{/each}}
    } = args;

    const cleanPageSize = pageSize > 100 ? 100 : pageSize;

    const options = {
      limit: cleanPageSize,
      skip: page * cleanPageSize - cleanPageSize,
    };

    const orderDirection = order === 'descend' ? -1 : 1;
    options.sort = {};
    options.sort[sort] = orderDirection;

    const query = {};
    {{#each schema.fields}}
    {{#if this.filterable}}
    if (isArray({{ @key }})) {
      query.{{ @key }} = { $in: {{ @key }} };
    }
    {{/if}}
    {{/each}}

    {{#if isSearchable}}
    if (search) {
      const searchRegEx = new RegExp(search, 'i');
      query.$or = [
      {{#each schema.fields}}
        {{#compare this.searchable '||' this.labelKey}}
        { {{ @key }}: searchRegEx },
        {{/compare}}
      {{/each}}
      ];
    }
    {{/if}}

    const result = {{ pascalCase name }}.find(query, options);

    return {
      total: result.count(false),
      {{ camelCase name }}: result.fetch(),
    };
  },
  my{{ pascalCase name }}: (parent, args, context) => {
    {{#compare schema.permissions.read '!==' 'everyone' }}
    if (!context.user || !context.user._id || !checkUserRole(context.user._id, '{{schema.permissions.read}}')) {
      throw new Error('Sorry, you must have permission to view my {{ pascalCase name }}.');
    }
    {{/compare}}
    return {{ pascalCase name }}.find({ {{userKeyField}}: context.user._id }).fetch();
  },
  {{ camelCase (singular name) }}: (parent, args, context) => {
    {{#compare schema.permissions.read '!==' 'everyone' }}
    if (!context.user || !context.user._id || !checkUserRole(context.user._id, '{{schema.permissions.read}}')) {
      throw new Error('Sorry, you must have permission to view {{ pascalCase (singular name) }}.');
    }
    {{/compare}}
    const {{ camelCase (singular name) }}IdFromParentQuery = parent && parent.{{ camelCase (singular name) }}Id;
    {{#compare primaryKeyField '===' urlKeyField }}
    return {{ pascalCase name }}.findOne({ {{primaryKeyField}}: {{ camelCase (singular name) }}IdFromParentQuery || args.{{primaryKeyField}}  });
    {{else}}
    if (args.{{ primaryKeyField }}) {
      return {{ pascalCase name }}.findOne({ {{primaryKeyField}}: args.{{primaryKeyField}}  });
    } 
    if (args.{{ urlKeyField }}) {
      return {{ pascalCase name }}.findOne({ {{urlKeyField}}: args.{{urlKeyField}} });
    } 
    return null;
    {{/compare}}
  }
  /* #### PLOP_QUERIES_START #### */
  /* #### PLOP_QUERIES_END #### */
};
