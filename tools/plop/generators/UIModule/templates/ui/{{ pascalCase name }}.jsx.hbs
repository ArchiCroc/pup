import React from 'react';
// import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery } from '@apollo/react-hooks';
import Table from 'antd/lib/table';
import PageHeader from '../components/PageHeader';
import PrettyDate from '../components/PrettyDate';

import New{{ pascalCase (singular name) }}Button from './components/New{{ pascalCase (singular name) }}Button';

import Styled{{ pascalCase name }} from './Styled{{ pascalCase name }}';

import { {{ camelCase (singular name) }} as {{ camelCase (singular name) }}Query } from './queries/{{ pascalCase name }}.gql';

const {{ pascalCase name }} = (props) => {
  const {
    loading,
    data: { {{ camelCase (singular name) }} },
  } = useQuery({{ camelCase (singular name) }}Query);

  const columns = [
{{#each schema ~}}
  {{~#compare this.input '||' this.table }}
    {
      title: i18n.__(' {{~ pascalCase @root.name ~}} .{{#compare this.table 'typeof' 'string'}}{{this.table}}{{else}}{{ @key }}{{/compare}}'),
      dataIndex: '{{ @key }}',
      {{#compare this.type '===' 'String'}}
      sorter: (a, b) => a.{{ @key }}.localeCompare(b.{{ @key }}),
      defaultSortOrder: 'ascend',
      // render: (value, record) => <Link to={`/{{ dashCase @root.name }}/${record.{{ @root.primaryKeyField ~}} }/edit`}>{value}</Link>, // eslint-disable-line
      {{/compare}}
      {{#compare this.type 'includes' 'Date|DateTime|Time'}}
      sorter: (a, b) => new Date(a.{{ @key }}).getTime() - new Date(b.{{ @key }}).getTime(),
      defaultSortOrder: 'descend',
      render: ({{ @key }}) => <PrettyDate timestamp={ {{~ @key ~}} } />, // eslint-disable-line 
      {{/compare}}
      {{#compare this.type '===' 'Boolean'}}
      sorter: true,
      // defaultSortOrder: 'ascend',
      render: (value, record, index) => i18n.__(`{{ pascalCase @root.name }}.${value ? 'yes' : 'no'}`),
      {{/compare}}
      {{#compare this.type '===' 'Number'}}
      sorter: true,
      // defaultSortOrder: 'ascend',
      render: (value, record) => value, // eslint-disable-line
      {{/compare}}
    },
  {{/compare}}
{{/each}}
  ];

  return (
    <Styled{{ pascalCase name }}>
      <PageHeader title={i18n.__('{{ pascalCase name }}.{{ snakeCase (singular name) }}_plural')} />
      <New{{ pascalCase (singular name) }}Button />
      <Table
        dataSource={ {{~ camelCase (singular name) ~}} }
        columns={columns}
        rowKey="{{ primaryKeyField }}"
        pagination={false}
        loading={loading}
      />
    </Styled{{ pascalCase name }}>
  );
};

// {{ pascalCase name }}.propTypes = {
//   userId: PropTypes.string.isRequired,
// };

export default {{ pascalCase name }};
