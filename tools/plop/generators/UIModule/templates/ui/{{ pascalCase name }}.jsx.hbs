import React, { useState } from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery } from '@apollo/react-hooks';
import queryString from 'query-string';
{{#if isFilterable}}
import isString from 'lodash/isString';
{{/if}}
import Table from 'antd/lib/table';
import Input from 'antd/lib/input';
import PageHeader from '../components/PageHeader';
import PrettyDate from '../components/PrettyDate';

import New{{ pascalCase (singular name) }}Button from './components/New{{ pascalCase (singular name) }}Button';

import Styled{{ pascalCase name }} from './Styled{{ pascalCase name }}';

import { {{ camelCase name }} as {{ camelCase name }}Query } from './queries/{{ pascalCase name }}.gql';

{{#if isSearchable}}
const { Search } = Input;
{{/if}}

const {{ pascalCase name }} = ({ history, location }) => {

  const {
    pageSize = 10,
    page = 1,
    sort = '{{#if schema.defaultSortField}}{{schema.defaultSortField}}{{else}}{{labelKeyField}}{{/if}}',
    order = '{{#if schema.defaultSortOrder}}{{schema.defaultSortOrder}}{{else}}ascend{{/if}}',
{{#if isSearchable}}
    search = null,
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
    {{ @key }},
  {{/if}}
{{/each}}
  } = queryString.parse(location.search, { arrayFormat: 'comma' });

  const paginationObject = {
    pageSize,
    //  onChange: this.onPageChange,
  };

  const [currentPage, setCurrentPage] = useState(parseInt(page, 10));
  const [currentSort, setCurrentSort] = useState(sort);
  const [currentOrder, setCurrentOrder] = useState(order);
{{#if isSearchable}}
  const [currentSearch, setCurrentSearch] = useState(search);
{{/if}}
{{#each schema.fields}}
  {{#if this.filterable}}
    {{ @key }},
     {{#compare (stripBrackets this.type) '===' 'Int' }}
  const [current{{ pascalCase @key }}, setCurrent{{ pascalCase @key }}] = useState(
    {{ @key }} && isString({{ @key }}) ? [parseInt({{ @key }}, 10)] : {{ @key }} && {{ @key }}.map(parseInt),
  );
    {{/compare}}
    {{#compare (stripBrackets this.type) 'in' 'Float|Number' }}
  const [current{{ pascalCase @key }}, setCurrent{{ pascalCase @key }}] = useState(
    {{ @key }} && isString({{ @key }}) ? [parseFloat({{ @key }}, 10)] : {{ @key }} && {{ @key }}.map(parseFloat),
  );
    {{/compare}}
    {{#compare (stripBrackets this.type) '===' 'String' }}
  const [current{{ pascalCase @key }}, setCurrent{{ pascalCase @key }}] = useState(
    {{ @key }} && isString({{ @key }}) ? [{{ @key }}] : {{ @key }},
  );
    {{/compare}}
    {{#compare this.type '===' 'Boolean' }}
  const [current{{ pascalCase @key }}, setCurrent{{ pascalCase @key }}] = useState(
    {{ @key }} && isString({{ @key }}) ? !!({{ @key }}.toLowerCase() === 'true') : {{ @key }},
  );
    {{/compare}}
  {{/if}}
{{/each}}

  const { loading, data: { {{ camelCase name }} } = {} } = useQuery({{ camelCase name }}Query, {
    fetchPolicy: 'cache-and-network',
    variables: {
      pageSize: paginationObject.pageSize,
      page: currentPage,
      sort: currentSort,
      order: currentOrder,
{{#if isSearchable}}
      search: currentSearch,
{{/if}}
  {{#each schema.fields}}
    {{#if this.filterable}}
      {{ @key }}: current{{ pascalCase @key }},
    {{/if}}
  {{/each}}
    },
  });

  const columns = [
{{#each schema.fields ~}}
  {{#compare this.input '!==' 'Hidden' '&&' this.showInTableView '!==' false}}
    {{~#compare this.input '||' this.showInTableView }}
    {
      title: i18n.__(' {{~ pascalCase @root.name ~}} .{{ snakeCase @key }}'),
      dataIndex: '{{ @key }}{{#if this.dataIndex}}{{#compare this.type '!startsWith' '['}}.{{ this.dataIndex }}{{/compare}}{{/if}}',
      {{#compare this.type '===' 'String'}}
      sorter: true,
      defaultSortOrder: 'ascend',
      // render: (value, record) => <Link to={`/{{ dashCase @root.name }}/${record.{{ @root.urlKeyField ~}} }/edit`}>{value}</Link>, // eslint-disable-line
      {{/compare}}
      {{#compare this.type 'in' 'Date|DateTime|Time'}}
      sorter: true,
      defaultSortOrder: 'descend',
      render: ({{ @key }}) => <PrettyDate timestamp={ {{~ @key ~}} } />, // eslint-disable-line 
      {{/compare}}
      {{#compare this.type '===' 'Boolean'}}
      sorter: true,
      // defaultSortOrder: 'ascend',
      render: (value, record, index) => i18n.__(`{{ pascalCase @root.name }}.${value ? 'yes' : 'no'}`),
      {{/compare}}
      {{#compare this.type 'in' 'Number|Float'}}
      sorter: true,
      // defaultSortOrder: 'ascend',
      // render: (value, record) => value, // eslint-disable-line
      {{/compare}}
      {{#compare this.input 'in' 'Array|Select|Options|Dropdown'  }}
      sorter: true,
      // defaultSortOrder: 'ascend',
      {{#if this.choices}}
      render: (value, record) => i18n.__(`{{ pascalCase @root.name }}.{{@key}}_${value}`), // eslint-disable-line
      {{/if}}
      {{else}}
        {{#compare this.type 'startsWith' '['}}
      render: (value) => value{{#if this.dataIndex}}.map((item) => item.{{ this.dataIndex }}){{/if}}.join(', '),
        {{/compare}}
      {{/compare}}
    },
    {{/compare}}
  {{/compare}}
{{/each}}
  ];

  // complete paginationObject
  if ({{ camelCase name }} && {{ camelCase name }}.{{ camelCase name }}) {
    paginationObject.total = {{ camelCase name }}.total;
    paginationObject.current = currentPage;
  }
{{#if isSearchable}}
  function handleSearch(value) {
    setCurrentSearch(value);
    history.push({
      pathname: window.location.pathname,
      search: `?${queryString.stringify(
        {
          page: currentPage,
          sort: currentSort,
          order: currentOrder,
      {{#if isSearchable}}
          search: value,
      {{/if}}
      {{#each schema.fields}}
        {{#if this.filterable}}
          {{ @key }}: current{{ pascalCase @key }},
        {{/if}}
      {{/each}}  
        },
        { arrayFormat: 'comma' },
      )}`,
    });
  }
{{/if}}

  function handleTableChange(pagination, filters, sorter) {
{{#if isFilterable}}
    const { 
  {{#each schema.fields}}
    {{#if this.filterable}}
      {{ @key }}: new{{ pascalCase @key }} = null,
    {{/if}}
  {{/each}}  
    } = filters;
{{/if}}

    const currentField = sorter.field ? sorter.field.split('.')[0] : 'createdAtUTC';

    setCurrentPage(pagination.current);
    setCurrentOrder(sorter.order);
    setCurrentSort(sorter.field);
{{#each schema.fields}}
  {{#if this.filterable}}
    set{{ pascalCase @key }}(new{{ pascalCase @key }});
  {{/if}}
{{/each}}  

    history.push({
      pathname: window.location.pathname,
      search: `?${queryString.stringify(
        {
          page: pagination.current,
          sort: currentField,
          order: sorter.order,
      {{#if isSearchable}}
          search: currentSearch,
      {{/if}}
      {{#each schema.fields}}
        {{#if this.filterable}}
          {{ @key }}: new{{ pascalCase @key }},
        {{/if}}
      {{/each}}  
        },
        { arrayFormat: 'comma' },
      )}`,
    });
  }

  function handleTableRow(record) {
    return {
      onClick: () => {
        history.push(`/{{ dashCase name }}/${record.{{ urlKeyField ~}} }`);
      },
    };
  };

  return (
    <Styled{{ pascalCase name }}>
      <PageHeader title={i18n.__('{{ pascalCase name }}.{{ snakeCase (singular name) }}_plural')} />
      <p>
        <New{{ pascalCase (singular name) }}Button />
        {{#if isSearchable}}
        <span className="pull-right" style=\{{ width: 300 }}>
          <Search
            placeholder={i18n.__('{{ pascalCase name }}.search_placeholder')}
            onSearch={handleSearch}
            defaultValue={currentSearch}
            allowClear
            enterButton
          />
        </span>
        {{/if}}
      </p>
      <Table
        columns={columns}
        dataSource={ {{~ camelCase name }} && {{ camelCase name }}.{{ camelCase name ~}} }
        loading={loading}
        onChange={handleTableChange}
        onRow={handleTableRow}
        rowKey="{{ primaryKeyField }}"
        pagination={paginationObject}
        rowClassName="clickable"
      />
    </Styled{{ pascalCase name }}>
  );
};

{{ pascalCase name }}.propTypes = {
  history: PropTypes.object.isRequired,
  location: PropTypes.object.isRequired,
};

export default {{ pascalCase name }};
