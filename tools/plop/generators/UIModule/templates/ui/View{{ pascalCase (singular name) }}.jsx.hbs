import React from 'react';
import PropTypes from 'prop-types';
import i18n from 'meteor/universe:i18n';
import { useQuery } from '@apollo/react-hooks';
import Row from 'antd/lib/row';
import Col from 'antd/lib/col';
import Descriptions from 'antd/lib/descriptions';
import FormatDate from '../components/FormatDate';
import PageHeader from '../components/PageHeader';
import Loading from '../components/Loading';
import NotFound from '../pages/NotFound';

import Edit{{ pascalCase (singular name) }}Button from './components/Edit{{ pascalCase (singular name) }}Button'

import { {{ camelCase (singular name) }} as {{ camelCase (singular name) }}Query } from './queries/{{ pascalCase name }}.gql';

import StyledView{{ pascalCase (singular name) }} from './StyledView{{ pascalCase (singular name) }}';

const View{{ pascalCase (singular name) }} = ({ match }) => {
  const { loading, data: { {{ camelCase (singular name) }} } = {} } = useQuery({{ camelCase (singular name) }}Query, { variables: { {{ urlKeyField }}: match.params.{{ urlKeyField }} } });

  return (
    <StyledView{{ pascalCase (singular name) }}>
      <PageHeader title={i18n.__('{{ pascalCase name }}.view_{{ snakeCase (singular name) }}')} />
      { {{~ camelCase (singular name) }} && (
        <p>
          <Edit{{ pascalCase (singular name) }}Button {{urlKeyField}}={ {{~ camelCase (singular name) }}.{{ urlKeyField ~}} } />
        </p>
      )}
      <Row>
        <Col xs={24} sm={24} md={20} lg={16}>
          {loading ? (
            <Loading />
          ) : (
            <>{ {{~ camelCase (singular name) }} ? <View{{ pascalCase (singular name) }}Fields {{ camelCase (singular name) }}={ {{~ camelCase (singular name) ~}} } /> : <NotFound />}</>
          )}
        </Col>
      </Row>
    </StyledView{{ pascalCase (singular name) }}>
  );
};

View{{ pascalCase (singular name) }}.propTypes = {
  // history: PropTypes.object.isRequired,
  match: PropTypes.object.isRequired,
};

const View{{ pascalCase (singular name) }}Fields = ({ {{ camelCase (singular name) }} }) => {
  return (
    <Descriptions bordered column={1}>
{{#each schema.fields ~}}
  {{#compare this.input '!==' 'Hidden' '&&' this.showInDetailView '!==' false}}
      <Descriptions.Item label={i18n.__('{{ pascalCase @root.name }}.{{ snakeCase @key }}')}>
      {{#compare this.choices 'typeof' 'object'}}
        {i18n.__(`{{ pascalCase @root.name }}.{{ snakeCase @key }}_${ {{~ camelCase (singular @root.name) }}.{{#if this.dataIndex}}{{ this.dataIndex }}{{else}}{{ @key }}{{/if ~}} }`)}
      {{else}}
        {{#compare this.type 'in' 'DateTime' }}
        <FormatDate timestamp={ {{~ camelCase (singular @root.name) }}.{{ @key }}{{#if this.dataIndex}}.{{ this.dataIndex }}{{/if ~}} } />
        {{/compare}}
        {{#compare this.type 'startsWith' '[' }}
        { {{~ camelCase (singular @root.name) }}.{{ @key }}{{#if this.dataIndex}}.map((item) => item.{{ this.dataIndex }}){{/if}}.join(', ')}
        {{/compare}}
        {{#compare this.type '!in' 'DateTime' '&&' this.type '!startsWith' '[' }}
        { {{~ camelCase (singular @root.name) }}.{{ @key }}{{#if this.dataIndex}}.{{ this.dataIndex }}{{/if ~}} }
        {{/compare}}
      {{/compare}}
      </Descriptions.Item>
  {{/compare~}}
{{~/each}}
    </Descriptions>
  );
};

View{{ pascalCase (singular name) }}Fields.propTypes = {
  {{ camelCase (singular name) }}: PropTypes.object.isRequired,
};

export default View{{ pascalCase (singular name) }};
