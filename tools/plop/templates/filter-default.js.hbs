{{#compare template '===' 'ui/imports'}}
import isString from 'lodash/isString';
{{#if reference}}
import useQueryForFilters from '{{@root.uiPathOffset}}../../../modules/hooks/useQueryForFilters';
{{/if}}
{{/compare}}
{{#compare template '===' 'ui/helpers'}}
  {{#if choices}}
function get{{pascalCase fieldName}}Filters() {
  const choices = [{{#each choices}}{{quoteIfString this}}{{#unless @last}}, {{/unless}}{{/each}}];
  const filters = [];
  for (const choice of choices) {
    filters.push({ text: i18n.__(`{{ pascalCase @root.pluralName }}.{{snakeCase fieldName}}_${choice}`), value: choice },)
  }
  return filters;
}
  {{/if}}
{{/compare}}
{{#compare template 'in' 'ui/variables|api/variables'}}
{{fieldName}},
{{/compare}}
{{#compare template '===' 'ui/useState'}}
  {{#compare (stripBrackets fieldType) '===' 'Int' }}
const [current{{ pascalCase fieldName }}, setCurrent{{ pascalCase fieldName }}] = useState(
  {{ fieldName }} && isString({{ fieldName }}) ? [parseInt({{ fieldName }}, 10)] : {{ fieldName }} && {{ fieldName }}.map(parseInt),
);
  {{/compare}}
  {{#compare (stripBrackets fieldType) 'in' 'Float|Number' }}
const [current{{ pascalCase fieldName }}, setCurrent{{ pascalCase fieldName }}] = useState(
  {{ fieldName }} && isString({{ fieldName }}) ? [parseFloat({{ fieldName }}, 10)] : {{ fieldName }} && {{ fieldName }}.map(parseFloat),
);
  {{/compare}}
  {{#compare (stripBrackets fieldType) 'in' 'String|ObjectID' }}
const [current{{ pascalCase fieldName }}, setCurrent{{ pascalCase fieldName }}] = useState(
  {{ fieldName }} && isString({{ fieldName }}) ? [{{ fieldName }}] : {{ fieldName }},
);
  {{/compare}}
{{/compare}}
{{#compare template '===' 'ui/useQueryVariablesKeys'}}
{{fieldName}}: current{{pascalCase fieldName}},
{{/compare}}
{{#compare template '===' 'ui/addtionalHooks'}}
  {{#if reference}}
const { filters: {{camelCase fieldName}}Filters } = useQueryForFilters({
  query: '{{reference.query}}',
  {{#if reference.edges}}
  edges: '{{reference.edges}}',
  {{/if}}
  labelKey: '{{reference.labelKey}}',
  valueKey: '{{reference.valueKey}}',
});
  {{/if}}
{{/compare}}
{{#compare template '===' 'ui/columnKeys'}}
  {{#if  this.choices}}
filteredValue: current{{pascalCase fieldName }},
filters: get{{pascalCase fieldName }}Filters(),
  {{else}}
    {{#if this.reference}}
filteredValue: current{{pascalCase fieldName }},
filters: {{camelCase fieldName}}Filters,
    {{/if}}
  {{/if}}  
{{/compare}}
{{#compare template '===' 'ui/handleTableChangeNewKeys'}}
{{#if dataIndex}}'{{key}}.{{dataIndex}}'{{else}}{{ fieldName }}{{/if}}: new{{pascalCase fieldName }},
{{/compare}}
{{#compare template '===' 'ui/handleTableChangeSetState'}}
setCurrent{{pascalCase fieldName}}(new{{pascalCase fieldName}});
{{/compare}}
{{#compare template '===' 'ui/handleTableChangeSetQueryObjectKey'}}
{{ fieldName }}: new{{pascalCase fieldName}},
{{/compare}}
{{#compare template '===' 'ui/defaultPropsKeys'}}
{{fieldName}}: undefined,
{{/compare}}
{{#compare template '===' 'ui/propTypesKeys'}}
  {{#compare (stripBrackets fieldType) 'in' 'Float|Number|Int' }}
{{fieldName}}: PropTypes.oneOfType([
  PropTypes.string,
  PropTypes.number,
  PropTypes.array,
]),
  {{/compare}}
  {{#compare (stripBrackets fieldType) 'in' 'String|ObjectID' }}
{{fieldName}}: PropTypes.oneOfType([
  PropTypes.string,
  PropTypes.array,
]),
  {{/compare}}
  {{#compare (stripBrackets fieldType) '!in' 'Float|Number|Int|String|ObjectID|Boolean' }}
{{fieldName}}: PropTypes.oneOfType([
  PropTypes.string,
  PropTypes.array,
  PropTypes.object,
]),
  {{/compare}}
{{/compare}}
{{#compare template '===' 'ui/gqlMultiItemsQueryVariables'}}
  {{#compare fieldType 'startsWith' '['}}
${{fieldName}}: {{cleanGraphqlType fieldType}},
  {{else}}
${{fieldName}}: [{{cleanGraphqlType fieldType}}],
  {{/compare}}
{{/compare}}
{{#compare template '===' 'ui/gqlMultiItemsQueryArguments'}}
{{ fieldName }}: ${{fieldName}},
{{/compare}}
{{#compare template '===' 'api/queryImports'}}
import isArray from 'lodash/isArray';
{{/compare}}
{{#compare template '===' 'api/multiItemQueryModifiers'}}
if (isArray({{fieldName}})) {
  if ({{fieldName}}.length > 0) {
    query.{{fieldName}} = { $in: {{fieldName}} };
  }
} else if ({{fieldName}} !== undefined && {{fieldName}} !== null) {
  query.{{fieldName}} = {{fieldName}};
}

{{/compare}}
{{#compare template '===' 'api/typeFilterFields'}}
{{/compare}}
{{#compare template '===' 'api/graphql-apiMultiItemsQueryArguments'}}
  {{#compare fieldType 'startsWith' '['}}
{{fieldName}}: {{cleanGraphqlType fieldType}}
  {{else}}
{{fieldName}}: [{{cleanGraphqlType fieldType}}]
  {{/compare}}
{{/compare}}