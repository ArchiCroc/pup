{{#compare template '===' 'input/multiple'}}
true /*supports array values natively */
{{/compare}}
{{#compare template '===' 'form/imports'}}
import SelectField from '{{@root.uiPathOffset}}../../components/SelectField';
{{/compare}}
{{#compare template '===' 'form/render'}}
<SelectField {{> input-props}}/>
{{/compare}}
{{#compare template '===' 'e2eTest/new'}}
// set Select {{name}} field
const {{name}}Field = form.findReact('Select').withProps({ name: '{{name}}' });
await t
.click(levelField)
.expect(levelField.findReact('List').exists)
.ok()
.click(levelField.findReact('Item').withKey(mockNewErrorReport.{{name}}));
{{/compare}}
{{#compare template '===' 'e2eTest/edit'}}
// @todo change  Select {{name}} field
const {{name}}Field = form.findReact('Select').withProps({ name: '{{name}}' });
await t
.expect(levelField.getReact(({ props }) => props.value))
.eql(mockNewErrorReport.{{name}})
.click(levelField)
.expect(levelField.findReact('List').exists)
.ok()
.click(levelField.findReact('Item').withKey(mockEditErrorReport.{{name}}));
{{/compare}}
{{#compare template '===' 'e2eTest/view'}}
{{!-- define mock to eql mockNew{{pascalCase singularName}} or mockEdit{{pascalCase singularName}} --}}
// validate Select {{name}} field
await t.expect(page.findReact('ValueWrapper').withProps({ name: '{{name}}', value: {{mock}}.{{name}}{{mockSuffix}} }).exists).ok();
{{/compare}}